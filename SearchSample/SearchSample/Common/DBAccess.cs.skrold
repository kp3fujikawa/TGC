using MRILossTool;
using System;
using System.Collections.Generic;
using System.Windows;
using System.Windows.Controls;

namespace MRITool
{
    /// <summary>
    /// DBアクセスクラス
    /// </summary>
    class DBAccess
    {
        /// <summary>
        /// 検索条件文字列を作成
        /// </summary>
        /// <param name="clstMonth">対象月リスト</param>
        /// <param name="clstLineStopExclusion">ライン停止除外リスト</param>
        /// <param name="clsPlanStopExclusion">計画停止除外リスト</param>
        /// <param name="clstPlanStop">メイン停止理由</param>
        /// <returns>検索条件文字列</returns>
        public string MakeSelectString(
            ListBox clstMonth,
            ListBox clstLineStopExclusion,
            ListBox clsPlanStopExclusion,
            ListBox clstPlanStop,
            string MAIN_STOP_REASON = "SCHEDULED_STOP_WORK_1"
        )
        {
            // 検索条件を設定
            String sqlSelect = " 0=0 ";
            String strLSExclusion = "";
            String strPSExclusion = "";
            String strPlanStop = "";

            try
            {

                // 対象月リスト
                List<string> monthList = new List<string>();
                for (int i = 0; i < clstMonth.Items.Count; i++)
                {
                    //monthList.Add(" MONTH = '" + clstMonth.CheckedItems[i] + "' ");
                    CheckBox chk = (CheckBox)clstMonth.Items[i];
                    if (chk.IsChecked == true)
                    {
                        monthList.Add("'" + chk.Content.ToString() + "'");
                    }
                }
                // ライン停止除外リスト
                List<string> excLSList = new List<string>();
                bool astLS = false;
                if (clstLineStopExclusion != null)
                {
                    for (int i = 0; i < clstLineStopExclusion.Items.Count; i++)
                    {
                        //if (clstLineStopExclusion.CheckedItems[i].Equals("*"))
                        if (GetCheckboxContent(clstLineStopExclusion, i).Equals("*"))
                        {
                            // ＊が指定されているとき
                            astLS = true;
                            break;
                        }
                        excLSList.Add("'" + clstLineStopExclusion.Items[i].ToString() + "'");
                    }
                }
                // 計画停止除外リスト
                List<string> excPSList = new List<string>();
                bool astPS = false;
                if (clsPlanStopExclusion != null)
                {
                    for (int i = 0; i < clsPlanStopExclusion.Items.Count; i++)
                    {
                        //if (clsPlanStopExclusion.CheckedItems[i].Equals("*"))
                        if (GetCheckboxContent(clsPlanStopExclusion, i).Equals("*"))
                        {
                            // ＊が指定されているとき
                            astPS = true;
                            break;
                        }
                        excPSList.Add("'" + clsPlanStopExclusion.Items[i].ToString() + "'");
                    }

                }
                // メイン停止理由
                List<string> planStopList = new List<string>();
                if (clstPlanStop != null)
                {
                    for (int i = 0; i < clstPlanStop.Items.Count; i++)
                    {
                        planStopList.Add("'" + clstPlanStop.Items[i].ToString() + "'");
                    }
                }

                // 条件を結合
                if (monthList.Count > 0 )
                {
                    sqlSelect += " AND (" + string.Join(" OR ", monthList) + ")";
                }
                else
                {
                    sqlSelect += " AND (MONTH IS NULL OR MONTH = '')";
                }

                List<string> addwhere = new List<string>();
                // ライン停止除外リスト
                if (astLS || excLSList.Count > 0)
                {
                    strLSExclusion = "EXCLUDE_UNSCHEDULED_STOP = '" + Common.NonTarget + "' AND STATUS_NAME = 'ライン停止'";
                    if (excLSList.Count > 0)
                    {
                        strLSExclusion += " AND UNSCHEDULED_STOP_REASON_1 in (" + string.Join(",", excLSList) + ") ";
                    }
                    if (astLS)
                    {
                        strLSExclusion = "EXCLUDE_UNSCHEDULED_STOP = '" + Common.NonTarget + "' AND STATUS_NAME = 'ライン停止'";
                    }
                    strLSExclusion = "( " + strLSExclusion + " )";
                    addwhere.Add(strLSExclusion);
                }


                // 計画停止除外リスト
                if ( astPS || excPSList.Count > 0 )
                {
                    strPSExclusion = "EXCLUDE_SCHEDULED_STOP = '" + Common.NonTarget + "' AND STATUS_NAME = '計画停止'";
                    if (excPSList.Count > 0)
                    {
                        strPSExclusion += " AND "+ MAIN_STOP_REASON + " in (" + string.Join(",", excPSList) + ")";
                    }
                    if (astPS)
                    {
                        strPSExclusion = "EXCLUDE_SCHEDULED_STOP = '" + Common.NonTarget + "' AND STATUS_NAME = '計画停止'";
                    }
                    strPSExclusion = "( " + strPSExclusion + " )";
                    addwhere.Add(strPSExclusion);
                }


                // メイン停止理由
                if (planStopList.Count > 0)
                {
                    strPlanStop = "( " + MAIN_STOP_REASON + " in (" + string.Join(",", planStopList) + ") OR UNSCHEDULED_STOP_REASON_1 in (" + string.Join(",", planStopList) + ") )";
                    addwhere.Add(strPlanStop);
                }               

                if (addwhere.Count > 0)
                {
                    sqlSelect += " AND (" + string.Join(" OR ", addwhere) + ")";
                }

            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            return sqlSelect;
        }

        /// <summary>
        /// WPF版：チェックリストボックスの表示文字列を取得する
        /// </summary>
        /// <param name="clst">リストボックス</param>
        /// <param name="i">配列番号</param>
        /// <returns></returns>
        public string GetCheckboxContent(
            ListBox clst,
            int i
            )
        {
            CheckBox chk = (CheckBox)clst.Items[i];
            return chk.Content.ToString();
        }
    }
}
