using MRILossTool.DataModel;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.OleDb;
using System.IO;
using System.Text;

namespace MRILossTool.Model
{
    /// <summary>
    /// 会社マスタ　アクセスモデル
    /// </summary>
    class CompanyMasterAccess
    {

        #region "定数"
        /// <summary>
        /// DB接続文字列：Provider
        /// </summary>
        public string connectionStringBase = Common.connectionStringBase;

        /// <summary>
        /// 内部保持データ（MDB）
        /// </summary>
        //private string LocalDBName = Common.LocalMasterDBName;
        private string LocalDBName = Common.LocalDBName;

        /// <summary>
        /// テーブル
        /// </summary>
        private string MasterTableName = "M_COMPANY";

        #endregion

        /// <summary>
        /// コンストラクタ
        /// </summary>
        public CompanyMasterAccess()
        {

        }

        /// <summary>
        /// マスタデータ（MDB）の読み込み：全項目
        /// </summary>
        /// <param name="dtMst">データテーブル</param>
        /// <returns>true/false</returns>
        public bool GetMasterData(
            ref DataSetMaster.M_COMPANYDataTable dtMst
            )
        {
            // DB接続文字列作成
            string connectionString = connectionStringBase + LocalDBName;
            bool ret = true;

            // 会社マスタをロードする
            dtMst = new DataSetMaster.M_COMPANYDataTable();

            try
            {
                using (OleDbConnection connection = new OleDbConnection(connectionString))
                {
                    connection.Open();

                    var columns = connection.GetSchema("Columns", new String[] { null, null, MasterTableName });
                    var desc = columns.Rows[0]["Description"];

                    string queryString = "SELECT * FROM " + MasterTableName + " ORDER BY CUST_CD";
                    OleDbDataAdapter adapter = new OleDbDataAdapter(queryString, connection);
                    adapter.Fill(dtMst);
                    adapter.Dispose();

                    connection.Close();
                }
            }
            catch (Exception ex)
            {
                ret = false;
            }
            finally
            {

            }

            return ret;
        }

        /// <summary>
        /// 会社マスタデータ（MDB）の読み込み：コード、名称のみ
        /// </summary>
        /// <returns>true/false</returns>
        public bool GetCustomerMasterData(
            ref DataSetMaster.M_COMPANYDataTable customerDT
            )
        {
            // DB接続文字列作成
            string connectionString = connectionStringBase + LocalDBName;
            bool ret = true;

            // 会社マスタをロード
            DataSetMaster.M_COMPANYDataTable dt = new DataSetMaster.M_COMPANYDataTable();

            try
            {
                using (OleDbConnection connection = new OleDbConnection(connectionString))
                {
                    connection.Open();

                    string queryString = "SELECT * FROM " + MasterTableName + " ORDER BY CUST_CD";
                    OleDbDataAdapter adapter = new OleDbDataAdapter(queryString, connection);
                    adapter.Fill(dt);
                    adapter.Dispose();

                    connection.Close();

                    // DataTableを作成
                    customerDT.Rows.Add(new object[] { "", "" });
                    foreach (DataSetMaster.M_COMPANYRow row in dt.Rows)
                    {
                        customerDT.Rows.Add(new object[] { row.CUST_CD, row.CUST_N });
                    }
                }
            }
            catch (Exception ex)
            {
                ret = false;
            }
            finally
            {

            }

            return ret;
        }

        /// <summary>
        /// CSVファイルをロード
        /// <param name="columnName">一覧ヘッダ</param>
        /// <param name="filenName">CSVファイル</param>
        /// <param name="dtMst">データテーブル</param>
        /// <param name="erro_list">結果リスト</param>
        /// <param name="strMsg">エラーメッセージ</param>
        /// <returns>0>:登録件数,-1:文字コードエラー,-2:CSVファイル読み込みエラー,-3:システムエラー</returns>
        /// </summary>
        public int ReadCSVFile(
            string[] columnName,
            String filenName,
            ref DataSetMaster.M_COMPANYDataTable dtMst,
            ref List<string> erro_list,
            ref string strMsg
            )
        {
            string strPath = string.Empty;

            int ret = 0;
            strMsg = "";

            try
            {
                String strCharSet = "";                                  // 文字コード（CSV用）：未指定時はShift-JIS
                String strDataSource = System.IO.Path.GetDirectoryName(filenName); // 対象ファイル名
                String strFileName = System.IO.Path.GetFileName(filenName);
                String strTableName = Guid.NewGuid().ToString("N").Substring(0, 8) + DateTime.Now.ToString("yyyyMMddHHmmss") + strFileName; // 対象テーブル名
                strPath = strDataSource + "\\" + strTableName;

                // 文字コードをチェック
                string strInpCode = Common.getStringCode(filenName);
                if (!strInpCode.Equals("Shift-JIS") && !strInpCode.Equals("UTF-8"))
                {
                    ret = -1;
                    return ret;
                }
                if (strInpCode.Equals("UTF-8"))
                {
                    strCharSet = "CharacterSet=65001;";
                }

                List<string> column = new List<string>();
                foreach (DataColumn col in dtMst.Columns)
                {
                    column.Add(col.ColumnName);
                }

                //ファイルの内容を読み込む
                StreamReader sr =
                    new StreamReader(filenName, Encoding.GetEncoding(strInpCode));
                string s = sr.ReadToEnd();
                sr.Close();

                // 文字列置換
                s = s.Replace(string.Join(",", columnName), string.Join(",", column));

                //書き込むファイルが既に存在している場合は上書き
                StreamWriter sw = new StreamWriter(
                    strPath,
                    false,
                    Encoding.GetEncoding(strInpCode));
                sw.Write(s);
                sw.Close();

                // ファイル読み込み
                string connectionString = connectionStringBase + strDataSource + "; "
                        + "Extended Properties=\"Text;" // ファイルプロパティ指定
                        + "HDR=YES;"                    // ヘッダー設定
                        + "FMT=Delimited;"              // フィールドの型
                        + strCharSet                    // 文字コード
                        + "\"";

                // CSVファイル読み込み時の定義ファイル出力
                Common.outputSchemaIni(strTableName, strDataSource, new List<string>(column), strCharSet);

                // CSVファイルをロード
                DataTable dtAdd = new DataTable();
                string queryString = "SELECT * FROM [" + strTableName + "]";
                try
                {
                    using (OleDbConnection connection = new OleDbConnection(connectionString))
                    {
                        connection.Open();

                        OleDbDataAdapter adapter = new OleDbDataAdapter(queryString, connection);
                        adapter.Fill(dtAdd);

                        connection.Close();
                    }
                }
                catch (Exception ex)
                {
                    ret = -2;
                    strMsg = ex.Message;
                    return ret;
                }
                finally
                {
                    if (File.Exists(strPath)) File.Delete(strPath);
                }

                // エラー情報
                erro_list = new List<string>();

                // データをDelete/Insert
                using (OleDbConnection connection = new OleDbConnection(connectionStringBase + LocalDBName))
                {

                    OleDbCommand command = new OleDbCommand();
                    OleDbTransaction transaction = null;
                    command.Connection = connection;
                    int cnt = 0;

                    try
                    {
                        connection.Open();

                        // トランザクション開始
                        transaction = connection.BeginTransaction(IsolationLevel.ReadCommitted);

                        // Assign transaction object for a pending local transaction.
                        command.Connection = connection;
                        command.Transaction = transaction;

                        // マスタ削除
                        command.CommandText = "DELETE FROM " + MasterTableName;
                        int delcnt = command.ExecuteNonQuery();

                        var dt = new DataSetMaster.M_COMPANYDataTable();

                        // マスタ登録
                        int lineno = 0;
                        foreach (DataRow row in dtAdd.Rows)
                        {
                            try
                            {
                                lineno++;

                                List<string> err_list2 = new List<string>();
                                var newrow = dt.NewM_COMPANYRow();
                                foreach (DataColumn col in dtAdd.Columns)
                                {
                                    string data = row[col.ColumnName].ToString();
                                    if (!dt.Columns[col.ColumnName].AllowDBNull && string.IsNullOrEmpty(data))
                                    {
                                        err_list2.Add(string.Format("{0}行目：{1}", lineno, "項目[" + col.ColumnName + "]は必須です。"));
                                    }
                                    else if (data.Length > dt.Columns[col.ColumnName].MaxLength)
                                    {
                                        err_list2.Add(string.Format("{0}行目：{1}", lineno, "項目[" + col.ColumnName + "]は最大文字数を超えています。"));
                                    }
                                    else
                                    {
                                        newrow[col.ColumnName] = row[col.ColumnName];
                                    }
                                }

                                if (err_list2.Count > 0)
                                {
                                    erro_list.AddRange(err_list2);
                                    continue;
                                }
                                dt.Rows.Add(newrow);

                                List<string> values = new List<string>();
                                foreach (DataColumn col in dtAdd.Columns)
                                {
                                    values.Add("'" + row[col.ColumnName] + "'");
                                }
                                command.CommandText =
                                    "INSERT INTO " + MasterTableName + " VALUES ( " + string.Join(",", values) + " )";
                                cnt += command.ExecuteNonQuery();
                            }
                            catch (Exception ex)
                            {
                                erro_list.Add(string.Format("{0}行目：{1}", lineno, ex.Message));
                            }
                        }

                        if (erro_list.Count > 0)
                        {
                            transaction.Rollback();
                        }
                        else
                        {
                            // コミット
                            transaction.Commit();

                            dtMst.Clear();

                            queryString = "SELECT * FROM " + MasterTableName + " ORDER BY CUST_CD";
                            OleDbDataAdapter adapter = new OleDbDataAdapter(queryString, connection);
                            adapter.Fill(dtMst);
                            adapter.Dispose();

                            ret = cnt;
                        }
                    }
                    catch (Exception ex)
                    {
                        ret = -3;
                        strMsg = ex.Message;
                        try
                        {
                            transaction.Rollback();
                        }
                        catch
                        {
                        }
                    }
                    finally
                    {
                        connection.Close();
                    }
                }
            }
            catch (Exception ex)
            {
                ret = -3;
                strMsg = ex.Message;
            }
            finally
            {
                if (!string.IsNullOrEmpty(strPath) && File.Exists(strPath))
                {
                    File.Delete(strPath);
                }
            }

            return ret;
        }
    }
}
