using MRILossTool.DataModel;
using MRILossTool.ViewModel;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.OleDb;
using System.IO;
using System.Linq;
using System.Text;
using System.Windows.Controls;
using static MRILossTool.DataExtractClass;

namespace MRILossTool.Model
{
    /// <summary>
    /// 対象テーブル アクセスモデル
    /// </summary>
    class TargetTableAccess
    {

        #region "定数"
        /// <summary>
        /// DB接続文字列：Provider
        /// </summary>
        public string connectionStringBase = Common.connectionStringBase;

        /// <summary>
        /// 内部保持データ（MDB）
        /// </summary>
        //private string LocalDBName = Common.LocalMasterDBName;
        private string LocalDBName = Common.LocalDBName;

        /// <summary>
        /// テーブル
        /// </summary>
        private string MasterTableName = "S_COMMON";

        #endregion

        /// <summary>
        /// コンストラクタ
        /// </summary>
        public TargetTableAccess()
        {

        }

        /// <summary>
        /// 対象テーブルの読み込み
        /// </summary>
        /// <param name="table_name">対象テーブル名</param>
        /// <param name="dic_target_table">データ配列</param>
        /// <returns>true/false</returns>
        public bool GetTargetTable(
            String table_name,
            ref Dictionary<string, DataColumn> dic_target_table
            )
        {
            // DB接続文字列作成
            string connectionString = connectionStringBase + LocalDBName;
            bool ret = true;

            DataTable dt = new DataTable();
            dic_target_table = new Dictionary<string, DataColumn>();

            try
            {
                using (OleDbConnection connection = new OleDbConnection(connectionString))
                {
                    connection.Open();

                    string queryString = "SELECT * FROM " + table_name + " WHERE 0=1";
                    OleDbDataAdapter adapter = new OleDbDataAdapter(queryString, connection);
                    adapter.Fill(dt);
                    adapter.Dispose();

                    connection.Close();

                    foreach (DataColumn col in dt.Columns)
                    {
                        if (!dic_target_table.ContainsKey(col.ColumnName))
                        {
                            dic_target_table[col.ColumnName] = col;
                        }
                    }

                }
            }
            catch (Exception ex)
            {
                ret = false;
            }
            finally
            {

            }

            return ret;
        }

        /// <summary>
        /// 項目名の読み込み
        /// </summary>
        /// <param name="table_name">対象テーブル名</param>
        /// <param name="itemNameDT">データテーブル</param>
        /// <returns>true/false</returns>
        public bool GetItemNameData(
            String table_name,
            ref DataTable itemNameDT
            )
        {
            // DB接続文字列作成
            string connectionString = connectionStringBase + LocalDBName;
            bool ret = true;

            if (string.IsNullOrEmpty(table_name)) return true;

            try
            {
                using (OleDbConnection connection = new OleDbConnection(connectionString))
                {
                    try
                    {

                        connection.Open();

                        itemNameDT.Rows.Clear();

                        DataTable dt = new DataTable();
                        string queryString = "SELECT * FROM " + table_name + " WHERE 0=1";
                        OleDbDataAdapter adapter = new OleDbDataAdapter(queryString, connection);
                        adapter.Fill(dt);
                        adapter.Dispose();

                        Dictionary<string, int> dic = new Dictionary<string, int>();
                        Dictionary<string, int> dicF = new Dictionary<string, int>();
                        foreach (DataColumn col in dt.Columns)
                        {
                            if (!dic.ContainsKey(table_name))
                            {
                                itemNameDT.Rows.Add(new object[] { table_name, "" });
                                dic[table_name] = 1;
                            }
                            if (!dicF.ContainsKey(table_name + col.ColumnName))
                            {
                                itemNameDT.Rows.Add(new object[] { table_name, col.ColumnName });
                                dicF[table_name + col.ColumnName] = 1;
                            }

                        }

                    }
                    catch (Exception ex)
                    {
                        ret = false;
                    }
                    finally
                    {
                        connection.Close();
                    }

                }
            }
            catch (Exception ex)
            {
                ret = false;
            }
            finally
            {

            }

            return ret;
        }

        /// <summary>
        /// 対象テーブルの検索
        /// </summary>
        /// <param name="strCompany">会社コード</param>
        /// <param name="strFactory">工場コード</param>
        /// <param name="strFromDate">From日付</param>
        /// <param name="strToDate">To日付</param>
        /// <param name="table_name">テーブル名</param>
        /// <param name="dtOld">データテーブル</param>
        /// <returns>true/false</returns>
        public bool GetOrgData(
            string strCompany,
            string strFactory,
            string strFromDate,
            string strToDate,
            String table_name,
            ref DataTable dtOld
            )
        {
            bool ret = true;

            // DB接続文字列作成
            string connectionString = connectionStringBase + LocalDBName;

            // 定義マスタをロードする
            dtOld = new DataTable();

            try
            {
                using (OleDbConnection connection = new OleDbConnection(connectionString))
                {
                    connection.Open();

                    // 既存データ取得
                    string where = string.Empty;
                    where += " AND COMPANY_CODE='" + strCompany + "'";
                    where += " AND FACTORY_CODE='" + strFactory + "'";
                    if (!string.IsNullOrEmpty(strFromDate))
                    {
                        where += " AND DAY >= '" + strFromDate + "'";
                    }
                    if (!string.IsNullOrEmpty(strToDate))
                    {
                        where += " AND DAY <= '" + strToDate + "'";
                    }
                    OleDbDataAdapter adapter = new OleDbDataAdapter(
                        "SELECT * FROM " + table_name + " WHERE 0=0 " + where, connection);
                    adapter.Fill(dtOld);
                    adapter.Dispose();

                    connection.Close();

                }
            }
            catch (Exception ex)
            {
                ret = false;
            }
            finally
            {

            }

            return ret;
        }

        /// <summary>
        /// 内部保持データの読み込み：グラフ用
        /// </summary>
        /// <param name="strCompany">会社コード</param>
        /// <param name="strFactory">工場コード</param>
        /// <param name="table_name">テーブル名</param>
        /// <param name="dtMain">データテーブル</param>
        /// <returns>true/false</returns>
        public bool GetLocalDBData(
            string strCompany,
            string strFactory,
            String table_name,
            ref DataTable dtMain
            )
        {

            // DB接続文字列作成
            string connectionString = connectionStringBase + LocalDBName;
            bool ret = true;

            // TMP_DB_FIXをロードする
            dtMain = new DataTable();
            String TargetTableName = table_name;

            string where = string.Empty;
            where += " AND COMPANY_CODE='" + strCompany + "'";
            where += " AND FACTORY_CODE='" + strFactory + "'";

            string queryString = "SELECT * FROM " + TargetTableName + " WHERE 0=0 " + where + " ORDER BY DAY";
            try
            {
                using (OleDbConnection connection = new OleDbConnection(connectionString))
                {
                    connection.Open();

                    OleDbDataAdapter adapter = new OleDbDataAdapter(queryString, connection);
                    adapter.Fill(dtMain);

                    connection.Close();
                }
            }
            catch (Exception ex)
            {
                ret = false;
            }
            finally
            {

            }

            return ret;
        }

        /// <summary>
        /// CSVファイルをロード
        /// </summary>
        /// <param name="columnName">一覧ヘッダ</param>
        /// <param name="filenName">CSVファイル</param>
        /// <param name="strCustomer">会社コード</param>
        /// <param name="strFactory">工場コード</param>
        /// <param name="strTargetTable">対象テーブル</param>
        /// <param name="erro_list">結果リスト</param>
        /// <param name="strMsg">エラーメッセージ</param>
        /// <returns>0>:登録件数,-1:文字コードエラー,-2:CSVファイル読み込みエラー,-3:システムエラー</returns>
        public int ReadCSVFile(
            string[] columnName,
            String filenName,
            string strCustomer,
            string strFactory,
            string strTargetTable,
            ref List<string> erro_list,
            ref string strMsg
            )
        {
            string strPath = string.Empty;

            int ret = 0;
            strMsg = "";

            try
            {
                String strCharSet = "";                                  // 文字コード（CSV用）：未指定時はShift-JIS
                String strDataSource = System.IO.Path.GetDirectoryName(filenName); // 対象ファイル名
                String strFileName = System.IO.Path.GetFileName(filenName);
                String strTableName = Guid.NewGuid().ToString("N").Substring(0, 8) + DateTime.Now.ToString("yyyyMMddHHmmss") + strFileName; // 対象テーブル名
                strPath = strDataSource + "\\" + strTableName;

                // 文字コードをチェック
                string strInpCode = Common.getStringCode(filenName);
                if (!strInpCode.Equals("Shift-JIS") && !strInpCode.Equals("UTF-8"))
                {
                    ret = -1;
                    return ret;
                }
                if (strInpCode.Equals("UTF-8"))
                {
                    strCharSet = "CharacterSet=65001;";
                }

                List<string> column = new List<string>();
                column.Add("CUST_CD");
                column.Add("KOJOCD");
                column.Add("TABLE_N");

                foreach (string col in columnName)
                {
                    column.Add(col);
                }

                //ファイルの内容を読み込む
                StreamReader sr =
                    new StreamReader(filenName, Encoding.GetEncoding(strInpCode));

                StringBuilder sb = new StringBuilder();
                // ヘッダー
                sb.AppendLine(string.Join(",", column));
                string line;
                int counter = 0;
                string fix_col = strCustomer;
                fix_col += "," + strFactory;
                fix_col += "," + strTargetTable;
                while ((line = sr.ReadLine()) != null)
                {
                    if (counter == 0) { counter++; continue; }
                    sb.AppendLine(fix_col + "," + line);
                    counter++;
                }
                sr.Close();

                //書き込むファイルが既に存在している場合は上書き
                StreamWriter sw = new StreamWriter(
                    strPath,
                    false,
                    Encoding.GetEncoding(strInpCode));
                sw.Write(sb.ToString());
                sw.Close();

                // ファイル読み込み
                string connectionString = connectionStringBase + strDataSource + "; "
                        + "Extended Properties=\"Text;" // ファイルプロパティ指定
                        + "HDR=YES;"                    // ヘッダー設定
                        + "FMT=Delimited;"              // フィールドの型
                        + strCharSet                    // 文字コード
                        + "\"";

                // CSVファイル読み込み時の定義ファイル出力
                Common.outputSchemaIni(strTableName, strDataSource, new List<string>(column), strCharSet);

                // CSVファイルをロード
                DataTable dtAdd = new DataTable();
                string queryString = "SELECT * FROM [" + strTableName + "]";
                try
                {
                    using (OleDbConnection connection = new OleDbConnection(connectionString))
                    {
                        connection.Open();

                        OleDbDataAdapter adapter = new OleDbDataAdapter(queryString, connection);
                        adapter.Fill(dtAdd);

                        connection.Close();
                    }
                }
                catch (Exception ex)
                {
                    ret = -2;
                    strMsg = ex.Message;
                    return ret;
                }
                finally
                {
                    if (File.Exists(strPath)) File.Delete(strPath);
                }

                // エラー情報
                erro_list = new List<string>();

                // データをDelete/Insert
                using (OleDbConnection connection = new OleDbConnection(connectionStringBase + LocalDBName))
                {

                    OleDbCommand command = new OleDbCommand();
                    OleDbTransaction transaction = null;
                    command.Connection = connection;
                    int cnt = 0;

                    try
                    {
                        connection.Open();

                        // トランザクション開始
                        transaction = connection.BeginTransaction(IsolationLevel.ReadCommitted);

                        // Assign transaction object for a pending local transaction.
                        command.Connection = connection;
                        command.Transaction = transaction;

                        // マスタ削除
                        String cust_cd = strCustomer;
                        String kojocd = strFactory;
                        String target_table = strTargetTable;
                        string where = string.Empty;
                        where += " AND CUST_CD='" + cust_cd + "'";
                        where += " AND KOJOCD='" + kojocd + "'";
                        where += " AND TABLE_N='" + target_table + "'";
                        command.CommandText = "DELETE FROM " + MasterTableName + " WHERE 0=0 " + where;
                        int delcnt = command.ExecuteNonQuery();

                        DataSetMaster.S_COMMONDataTable dt = new DataSetMaster.S_COMMONDataTable();

                        // マスタ登録
                        int lineno = 0;
                        DataColumn iCol = new DataColumn();
                        iCol.DataType = System.Type.GetType("System.Int32");
                        foreach (DataRow row in dtAdd.Rows)
                        {
                            try
                            {
                                lineno++;

                                List<string> err_list2 = new List<string>();
                                DataSetMaster.S_COMMONRow newrow = dt.NewS_COMMONRow();
                                foreach (DataColumn col in dtAdd.Columns)
                                {
                                    string data = row[col.ColumnName].ToString();
                                    if (!dt.Columns[col.ColumnName].AllowDBNull && string.IsNullOrEmpty(data))
                                    {
                                        err_list2.Add(string.Format("{0}行目：{1}", lineno, "項目[" + col.ColumnName + "]は必須です。"));
                                    }
                                    else if (data.Length > dt.Columns[col.ColumnName].MaxLength)
                                    {
                                        err_list2.Add(string.Format("{0}行目：{1}", lineno, "項目[" + col.ColumnName + "]は最大文字数を超えています。"));
                                    }
                                    else
                                    {
                                        if (col.ColumnName.Equals("SEQ_NO"))
                                        {
                                            iCol.ColumnName = col.ColumnName;
                                            // データチェック
                                            string errmessage;
                                            if (!Common.checkNumber(iCol, data, out errmessage))
                                            {
                                                err_list2.Add(string.Format("{0}行目：{1}", lineno, errmessage));
                                                continue;
                                            }
                                        }
                                        newrow[col.ColumnName] = row[col.ColumnName];
                                    }
                                }

                                if (err_list2.Count > 0)
                                {
                                    erro_list.AddRange(err_list2);
                                    continue;
                                }
                                dt.Rows.Add(newrow);

                                List<string> values = new List<string>();
                                foreach (DataColumn col in dtAdd.Columns)
                                {
                                    values.Add("'" + row[col.ColumnName] + "'");
                                }
                                command.CommandText =
                                    "INSERT INTO " + MasterTableName + "(" + string.Join(",", column) + ") VALUES ( " + string.Join(",", values) + " )";
                                cnt += command.ExecuteNonQuery();
                            }
                            catch (Exception ex)
                            {
                                erro_list.Add(string.Format("{0}行目：{1}", lineno, ex.Message));
                            }
                        }

                        if (erro_list.Count > 0)
                        {
                            transaction.Rollback();
                        }
                        else
                        {
                            // コミット
                            transaction.Commit();

                            ret = cnt;
                        }
                    }
                    catch (Exception ex)
                    {
                        ret = -3;
                        strMsg = ex.Message;
                        try
                        {
                            transaction.Rollback();
                        }
                        catch
                        {
                        }

                    }
                    finally
                    {
                        connection.Close();
                    }
                }
            }
            catch (Exception ex)
            {
                ret = -3;
                strMsg = ex.Message;
            }
            finally
            {
                if (!string.IsNullOrEmpty(strPath) && File.Exists(strPath))
                {
                    File.Delete(strPath);
                }
            }

            return ret;
        }

        /// <summary>
        /// 対象テーブルへデータ追加
        /// </summary>
        /// <param name="strCompany">会社コード</param>
        /// <param name="SelectedCompany">選択会社コード</param>
        /// <param name="strFactory">工場コード</param>
        /// <param name="SelectedFactory">選択工場コード</param>
        /// <param name="table_name">対象テーブル名</param>
        /// <param name="dtPos">取込定義マスタ</param>
        /// <param name="dtRepAll">取込置換定義マスタ</param>
        /// <param name="dic_target_table">対象テーブル定義データ</param>
        /// <param name="factory">工場レコード</param>
        /// <param name="dtAdd">追加データ</param>
        /// <param name="erro_list">結果リスト</param>
        /// <param name="strMsg">エラーメッセージ</param>
        /// <returns>0>:登録件数,-3:システムエラー</returns>
        public int InsertTargetTableData(
            string strCompany,
            string SelectedCompany,
            string strFactory,
            string SelectedFactory,
            String table_name,
            DataSetMaster.S_SETTING_INDataTable dtPos,
            DataSetMaster.S_REPLACE_INDataTable dtRepAll,
            Dictionary<string, DataColumn> dic_target_table,
            DataSetMaster.M_FACTORYRow factory,
            ref DataTable dtAdd,
            ref List<string> erro_list,
            ref string strMsg
            )
        {
            int ret = 0;                // 戻り値を設定

            // 対象テーブル必須項目取得
            Dictionary<string, int> target_table_required_dic =
                Common.target_table_required_dic.ContainsKey(table_name) ?
                Common.target_table_required_dic[table_name] :
                new Dictionary<string, int>();

            // エラー情報
            erro_list = new List<string>();

            // DB接続文字列作成
            string connectionString = connectionStringBase + LocalDBName;

            using (OleDbConnection connection = new OleDbConnection(connectionString))
            {

                OleDbCommand command = new OleDbCommand();
                OleDbTransaction transaction = null;
                command.Connection = connection;
                int cnt = 0;

                try
                {
                    connection.Open();

                    // トランザクション開始
                    transaction = connection.BeginTransaction(IsolationLevel.ReadCommitted);

                    // Assign transaction object for a pending local transaction.
                    command.Connection = connection;
                    command.Transaction = transaction;

                    // 不要な列を削除
                    if (dtAdd.Columns.Contains("COMPANY_CODE")) dtAdd.Columns.Remove("COMPANY_CODE");
                    if (dtAdd.Columns.Contains("COMPANY_NAME")) dtAdd.Columns.Remove("COMPANY_NAME");
                    if (dtAdd.Columns.Contains("FACTORY_CODE")) dtAdd.Columns.Remove("FACTORY_CODE");
                    if (dtAdd.Columns.Contains("FACTORY_NAME")) dtAdd.Columns.Remove("FACTORY_NAME");

                    // 登録
                    int lineno = 0;
                    foreach (DataRow row in dtAdd.Rows)
                    {
                        try
                        {
                            lineno++;

                            List<string> values = new List<string>();
                            List<string> cols = new List<string>();
                            cols.Add("COMPANY_CODE");
                            values.Add("'" + SelectedCompany + "'");
                            cols.Add("COMPANY_NAME");
                            values.Add("'" + strCompany + "'");
                            cols.Add("FACTORY_CODE");
                            values.Add("'" + SelectedFactory + "'");
                            cols.Add("FACTORY_NAME");
                            values.Add("'" + strFactory + "'");

                            bool dataExist = false;

                            List<string> err_list2 = new List<string>();
                            foreach (DataSetMaster.S_SETTING_INRow col in dtPos.Rows)
                            {
                                string data = string.Empty;
                                double interval = 0;
                                double add = 0;

                                if (!dic_target_table.ContainsKey(col.ITEM_N))
                                {
                                    // 対象テーブルにない項目はスキップ
                                    continue;
                                }
                                if (col.ITEM_N.Equals("COMPANY_CODE")
                                    || col.ITEM_N.Equals("COMPANY_NAME")
                                    || col.ITEM_N.Equals("FACTORY_CODE")
                                    || col.ITEM_N.Equals("FACTORY_NAME"))
                                {
                                    continue;
                                }

                                DataColumn tartgetCol = dic_target_table[col.ITEM_N];

                                // insert用のカラム名セット
                                cols.Add("[" + col.ITEM_N + "]");

                                try
                                {
                                    if (!string.IsNullOrEmpty(col.POS))
                                    {
                                        int pos = int.Parse(col.POS) - 1;
                                        if (pos > dtAdd.Columns.Count)
                                        {
                                            // 取得位置が読み込んだ項目数を超える場合
                                            values.Add("NULL");
                                            continue;
                                        }

                                        // 取得位置のデータをセット
                                        data = row[pos].ToString();
                                    }

                                    // 必須チェック
                                    if (target_table_required_dic.ContainsKey(col.ITEM_N)
                                        && string.IsNullOrEmpty(data))
                                    {
                                        err_list2.Add(string.Format("{0}行目：{1}", lineno, "項目[" + col.ITEM_N + "]は必須です。"));
                                    }

                                    if (string.IsNullOrEmpty(data))
                                    {
                                        // 変換種類：固定値、差分以外でNULLの場合
                                        if (!col.CHANGE_TYPE.Equals("01")       //固定値
                                            && !col.CHANGE_TYPE.Equals("02")    //差分_時
                                            && !col.CHANGE_TYPE.Equals("03")    //差分_分
                                            && !col.CHANGE_TYPE.Equals("04"))   //差分_秒
                                        {
                                            values.Add("NULL");
                                            continue;
                                        }
                                    }

                                    // 変換種類：差分の場合、開始／終了時刻より差分を算出
                                    bool intervalOK = false;
                                    if (col.CHANGE_TYPE.Equals("02") || col.CHANGE_TYPE.Equals("03") || col.CHANGE_TYPE.Equals("04"))
                                    {
                                        try
                                        {
                                            string start_time_str = row[int.Parse(col.ITEM1) - 1].ToString();
                                            string end_time_str = row[int.Parse(col.ITEM2) - 1].ToString();

                                            if (!string.IsNullOrEmpty(start_time_str) && !string.IsNullOrEmpty(end_time_str))
                                            {

                                                // 項目２(終了時刻) － 項目１(開始時刻)
                                                DateTime start_time = new DateTime();
                                                DateTime end_time = new DateTime();

                                                if (DateTime.TryParse(start_time_str, out start_time)
                                                    && DateTime.TryParse(end_time_str, out end_time))
                                                {
                                                    interval = (end_time - start_time).TotalSeconds; // 秒単位の差分

                                                    if (interval > 0)
                                                    {
                                                        // 休憩時間を計算して引く
                                                        interval -= CalcTotalBreakInterval(factory, start_time, end_time);
                                                        intervalOK = true;
                                                    }
                                                }
                                            }

                                        }
                                        catch
                                        {
                                        }
                                    }

                                    switch (col.CHANGE_TYPE)
                                    {
                                        case "00": //無変換
                                            break;
                                        case "01": //固定値
                                            data = string.IsNullOrEmpty(col.VALUE) ? "" : col.VALUE;
                                            break;
                                        case "02": //差分_時
                                            data = intervalOK ? (interval / 3600).ToString() : "";
                                            break;
                                        case "03": //差分_分
                                            data = intervalOK ? (interval / 60).ToString() : "";
                                            break;
                                        case "04": //差分_秒
                                            data = intervalOK ? interval.ToString() : "";
                                            break;
                                        case "05": //加算
                                            try
                                            {
                                                add = double.Parse(data) + double.Parse(col.VALUE);
                                                data = add.ToString();
                                            }
                                            catch { }
                                            break;
                                        case "06": //減算
                                            try
                                            {
                                                add = double.Parse(data) - double.Parse(col.VALUE);
                                                data = add.ToString();
                                            }
                                            catch { }
                                            break;
                                        case "07": //積算
                                            try
                                            {
                                                add = double.Parse(data) * double.Parse(col.VALUE);
                                                data = add.ToString();
                                            }
                                            catch { }
                                            break;
                                        case "08": //除算
                                            try
                                            {
                                                add = double.Parse(data) / double.Parse(col.VALUE);
                                                data = add.ToString();
                                            }
                                            catch { }
                                            break;
                                        case "09": //文字抜き出し

                                            string[] substr = col.VALUE.Split(',');
                                            if (substr.Length == 0) break;
                                            int start = int.Parse(substr[0]);
                                            if (start > 0) start--;
                                            int len = int.Parse(substr[1]);
                                            if (data.Length <= start)
                                            {
                                                break;
                                            }
                                            if (data.Length < start + len)
                                            {
                                                data = data.Substring(start, data.Length - start);
                                                break;
                                            }
                                            data = data.Substring(start, len);
                                            break;
                                        case "10": //文字変換

                                            // 取込置換定義マスタ取得
                                            DataRow[] dRows = dtRepAll.Select("ITEM_N = '" + col.ITEM_N + "'");
                                            string rep_data = data;
                                            foreach (DataSetMaster.S_REPLACE_INRow reprow in dRows)
                                            {
                                                // 文字列置換
                                                rep_data = rep_data.Replace(reprow.PREV_VALUE, reprow.AFTER_VALUE);
                                            }
                                            data = rep_data;
                                            break;
                                        default:
                                            break;
                                    }
                                }
                                catch
                                {
                                    data = "";
                                }

                                // 小数点指定桁数による丸め処理
                                if (!string.IsNullOrEmpty(col.ROUND_TYPE) && !data.Equals(""))
                                {
                                    data = GetData(data, col.DEC_POS, col.ROUND_TYPE);
                                }

                                // データチェック
                                string errmessage = "";
                                if (!Common.check(tartgetCol, data, out errmessage))
                                {
                                    err_list2.Add(string.Format("{0}行目：{1}", lineno, errmessage));
                                }
                                else
                                {
                                    // insert用の値セット
                                    values.Add(data.Equals("") ? "NULL" : "'" + data + "'");

                                    if (!string.IsNullOrEmpty(data))
                                    {
                                        dataExist = true;
                                    }
                                }
                            }

                            if (err_list2.Count > 0)
                            {
                                erro_list.AddRange(err_list2);
                                continue;
                            }

                            if (dataExist)
                            {
                                // isnertコマンド実行
                                command.CommandText =
                                    "INSERT INTO " + table_name +
                                    " ( " + string.Join(",", cols) + " ) VALUES ( " + string.Join(",", values) + " )";
                                cnt += command.ExecuteNonQuery();
                            }

                        }
                        catch (Exception ex)
                        {
                            erro_list.Add(string.Format("{0}行目：{1}", lineno, ex.Message));
                        }

                    }

                    if (erro_list.Count > 0)
                    {
                        transaction.Rollback();
                    }
                    else
                    {
                        // コミット
                        transaction.Commit();

                        ret = cnt;
                    }
                }
                catch (Exception ex)
                {
                    ret = -3;
                    strMsg = ex.Message;
                    try
                    {
                        transaction.Rollback();
                    }
                    catch
                    {
                    }

                }
                finally
                {
                    connection.Close();
                }
            }

            return ret;
        }

        /// <summary>
        /// 休憩時間合計算出
        /// </summary>
        public double CalcTotalBreakInterval(
            DataSetMaster.M_FACTORYRow factory,
            DateTime start_time,
            DateTime end_time
            )
        {

            double interval = 0;

            try
            {
                // 休憩時間1を計算
                if (!string.IsNullOrEmpty(factory.BREAK1_START) && !string.IsNullOrEmpty(factory.BREAK1_END))
                {
                    interval += CalcBreakInterval(start_time, end_time, factory.BREAK1_START, factory.BREAK1_END);
                }

                // 休憩時間2を計算
                if (!string.IsNullOrEmpty(factory.BREAK2_START) && !string.IsNullOrEmpty(factory.BREAK2_END))
                {
                    interval += CalcBreakInterval(start_time, end_time, factory.BREAK2_START, factory.BREAK2_END);
                }

                // 休憩時間3を計算
                if (!string.IsNullOrEmpty(factory.BREAK3_START) && !string.IsNullOrEmpty(factory.BREAK3_END))
                {
                    interval += CalcBreakInterval(start_time, end_time, factory.BREAK3_START, factory.BREAK3_END);
                }
            }
            catch { }

            return interval;

        }

        /// <summary>
        /// 休憩時間算出
        /// </summary>
        private double CalcBreakInterval(
            DateTime start, DateTime end,
            string factory_break_start, string factory_break_end)
        {
            try
            {
                DateTime break_start = DateTime.ParseExact(DataImportViewModel.ymd + factory_break_start.PadRight(6, '0'), DataImportViewModel.format, null);  // 休憩時間（開始）
                DateTime break_end = DateTime.ParseExact(DataImportViewModel.ymd + factory_break_end.PadRight(6, '0'), DataImportViewModel.format, null);      // 休憩時間（終了）

                // 時刻のみ取得
                TimeSpan break_start_time = break_start.TimeOfDay;
                TimeSpan break_end_time = break_end.TimeOfDay;

                TimeSpan start_time = start.TimeOfDay;
                TimeSpan end_time = end.TimeOfDay;

                bool over_day = false;

                // 日付を跨いでいる場合
                if (start.Day < end.Day) over_day = true;

                // 休憩時間（開始）< 開始時刻 -> 休憩時間（開始）= 開始時刻 とする
                if (break_start_time < start_time) break_start_time = start_time;

                // 終了時刻 < 休憩時間（終了）-> 休憩時間（終了）= 終了時刻 とする
                if (!over_day && end_time < break_end_time) break_end_time = end_time;

                // 終了時刻 < 休憩時間（開始） -> 0 を返す
                if (!over_day && end_time < break_start_time) return 0;

                // 休憩時間（終了）< 開始時刻 -> 0 を返す
                if (break_end_time < start_time) return 0;

                return (break_end_time - break_start_time).TotalSeconds; // 秒単位の差分
            }
            catch
            {
                return 0;
            }

        }

        /// <summary>
        /// データ取得
        /// </summary>
        private string GetData(string data, string dec_pos, string round_type)
        {
            try
            {
                if (string.IsNullOrEmpty(data)) return "";
                if (string.IsNullOrEmpty(dec_pos)) dec_pos = "0";

                double d = double.Parse(data);
                int idec_pos = int.Parse(dec_pos);
                double exp = Math.Pow(10, idec_pos);
                double dbuf = d * exp;
                switch (round_type)
                {
                    case "0": //切捨て
                        double dt = Math.Truncate(dbuf) / exp;
                        return dt.ToString();
                    case "1": //切上げ
                        double df = Math.Ceiling(dbuf) / exp;
                        return df.ToString();
                    case "2": //四捨五入
                        double dr = Math.Round(d, idec_pos, MidpointRounding.AwayFromZero);
                        return dr.ToString();
                    default:
                        return data;
                }
            }
            catch
            {
                return data;
            }

        }

        /// <summary>
        /// 対象テーブルのデータ削除
        /// </summary>
        /// <param name="strCompany">会社コード</param>
        /// <param name="strFactory">工場コード</param>
        /// <param name="strFromDate">From日付</param>
        /// <param name="strToDate">To日付</param>
        /// <param name="table_name">テーブル名</param>
        /// <param name="strMsg">エラーメッセージ</param>
        /// <returns>0>:削除件数,-3:システムエラー</returns>
        public int DeleteTargetTablegData(
            string strCompany,
            string strFactory,
            string strFromDate,
            string strToDate,
            String table_name,
            ref string strMsg
            )
        {
            int ret = 0;                // 戻り値を設定

            // DB接続文字列作成
            string connectionString = connectionStringBase + LocalDBName;

            // SQL文作成
            string where = string.Empty;
            where += " AND COMPANY_CODE='" + strCompany + "'";
            where += " AND FACTORY_CODE='" + strFactory + "'";
            if (!string.IsNullOrEmpty(strFromDate))
            {
                where += " AND DAY >= '" + strFromDate + "'";
            }
            if (!string.IsNullOrEmpty(strToDate))
            {
                where += " AND DAY <= '" + strToDate + "'";
            }

            try
            {
                using (OleDbConnection connection = new OleDbConnection(connectionString))
                {
                    OleDbCommand command = new OleDbCommand();

                    // DB更新
                    try
                    {
                        connection.Open();

                        command.Connection = connection;

                        command.CommandText = "DELETE FROM " + table_name + " WHERE 0=0 " + where;

                        int cnt = command.ExecuteNonQuery();

                        ret = cnt;

                    }
                    catch (Exception ex)
                    {
                        throw;
                    }
                    finally
                    {
                        connection.Close();
                    }
                }
            }
            catch (Exception ex)
            {
                strMsg = ex.Message;
                ret = -3;
            }

            return ret;
        }

        /// <summary>
        /// CSVファイルをロード
        /// </summary>
        /// <param name="strDBName">CSVファイル名</param>
        /// <param name="strTargetTable">対象テーブル名</param>
        /// <param name="dtAdd">読み込みデータ</param>
        /// <param name="strMsg">エラーメッセージ</param>
        /// <returns>0>:登録件数,-1:文字コードエラー,-2:CSVファイル読み込みエラー,-3:システムエラー,-4:ファイル拡張子エラー</returns>
        public int ReadCSVFile(
            string strDBName,
            string strTargetTable,
            ref DataTable dtAdd,
            ref string strMsg
            )
        {
            int ret = 0;
            strMsg = "";

            // データファイルの読み込み
            try
            {
                String strInHeader = "YES";                             // 1行目はヘッダー扱いとする
                String strIMEX = "IMEX=1;";                             // 文字列型設定
                String strCharSet = "";                                 // 文字コード（CSV用）：未指定時はShift-JIS
                String strFileEx = System.IO.Path.GetExtension(strDBName);   // ファイル拡張子
                String strExcelVer = "Excel ";                          // Excelファイルver確認
                String strDataSource = strDBName;                  // 対象ファイル名
                String strTableName = strTargetTable + "$";  // 対象テーブル名 $を付けないと存在しない列が読み込めない

                if (strFileEx == ".xls")
                {
                    strExcelVer += "8.0;";
                }
                else if (strFileEx == ".xlsx" || strFileEx == ".xlsm")
                {
                    strExcelVer += "12.0;";
                }
                else if (strFileEx == ".csv")
                {
                    strExcelVer = "Text;";
                    strIMEX = "FMT=Delimited;";
                    strDataSource = System.IO.Path.GetDirectoryName(strDBName);
                    strTableName = System.IO.Path.GetFileName(strDBName);
                }
                else
                {
                    // ファイルエラー
                    ret = -4;
                    return ret;
                }
                // 文字コードをチェック
                string strInpCode = "";
                if (strFileEx == ".csv")
                {
                    strInpCode = Common.getStringCode(strDBName);
                    if (!strInpCode.Equals("Shift-JIS") && !strInpCode.Equals("UTF-8"))
                    {
                        ret = -1;
                        return ret;
                    }
                    if (strInpCode.Equals("UTF-8"))
                    {
                        strCharSet = "CharacterSet=65001;";
                    }

                    //ファイルの内容を読み込む
                    StreamReader sr = new StreamReader(strDBName, Encoding.GetEncoding(strInpCode));
                    try
                    {
                        string line;
                        if ((line = sr.ReadLine()) != null)
                        {
                            string[] header = line.Split(',');
                            // CSVファイル読み込み時の定義ファイル出力
                            Common.outputSchemaIni(strTableName, strDataSource, new List<string>(header), strCharSet);
                        }
                    }
                    catch { }
                    finally { sr.Close(); }

                }

                // ファイル読み込み
                string connectionString = connectionStringBase + strDataSource + "; "
                        + "Extended Properties=\"" + strExcelVer    // Excelファイルver指定
                        + "HDR=" + strInHeader + ";"                // ヘッダー設定
                        + strIMEX                                   // フィールドの型
                        + strCharSet                                // 文字コード
                        + "\"";

                // DB_FIXをロードする
                dtAdd = new DataTable();
                string queryString = "SELECT * FROM [" + strTableName + "]";
                try
                {
                    using (OleDbConnection connection = new OleDbConnection(connectionString))
                    {
                        connection.Open();

                        OleDbDataAdapter adapter = new OleDbDataAdapter(queryString, connection);
                        adapter.Fill(dtAdd);

                        connection.Close();
                    }
                }
                catch (Exception ex)
                {
                    ret = -2;
                    strMsg = ex.Message;
                    return ret;
                }

                //// ファイルの構成をチェック
                //try
                //{
                //    string stryear = dtAdd.Columns["DAY"].ColumnName;
                //}
                //catch
                //{
                //    MessageBox.Show("テーブルの構成が違います。",
                //        "構成エラー", MessageBoxButton.OK, MessageBoxImage.Error);
                //    dtAdd.Clear();
                //    return;
                //}
            }
            catch (Exception ex)
            {
                ret = -3;
                strMsg = ex.Message;
            }

            return ret;
        }

        /// <summary>
        /// 対象テーブルのデータ共通化
        /// </summary>
        /// <param name="strCustomer">会社コード</param>
        /// <param name="strFactory">工場コード</param>
        /// <param name="strFromDate">From日付</param>
        /// <param name="strToDate">To日付</param>
        /// <param name="strTargetTable">対象テーブル</param>
        /// <param name="erro_list">結果リスト</param>
        /// <param name="strMsg">エラーメッセージ</param>
        /// <returns>0>:登録件数,-3:システムエラー</returns>
        public int ChangeData(
            string strCompany,
            string strFactory,
            string strFromDate,
            string strToDate,
            String table_name,
            DataTable dtOld,
            DataSetMaster.S_COMMONDataTable dtCommon,
            ref List<string> erro_list,
            ref string strMsg
            )
        {
            // 戻り値を設定
            int ret = 0;
            strMsg = "";

            string target_table = Common.table_dic[table_name];

            // DB接続文字列作成
            string connectionString = connectionStringBase + LocalDBName;

            using (OleDbConnection connection = new OleDbConnection(connectionString))
            {

                OleDbCommand command = new OleDbCommand();
                OleDbTransaction transaction = null;
                command.Connection = connection;
                int cnt = 0;

                try
                {
                    // エラー情報
                    erro_list = new List<string>();

                    connection.Open();

                    // トランザクション開始
                    transaction = connection.BeginTransaction(IsolationLevel.ReadCommitted);

                    // Assign transaction object for a pending local transaction.
                    command.Connection = connection;
                    command.Transaction = transaction;

                    // カラム名取得
                    List<string> cols = new List<string>();
                    foreach (DataColumn col in dtOld.Columns)
                    {
                        cols.Add("[" + col.ColumnName + "]");
                    }

                    // 既存データ削除
                    string where = string.Empty;
                    where += " AND COMPANY_CODE='" + strCompany + "'";
                    where += " AND FACTORY_CODE='" + strFactory + "'";
                    if (!string.IsNullOrEmpty(strFromDate))
                    {
                        where += " AND DAY >= '" + strFromDate + "'";
                    }
                    if (!string.IsNullOrEmpty(strToDate))
                    {
                        where += " AND DAY <= '" + strToDate + "'";
                    }
                    command.CommandText = "DELETE FROM " + target_table + " WHERE 0=0 " + where;
                    command.ExecuteNonQuery();


                    // 変換後データ登録
                    int lineno = 0;
                    foreach (DataRow row in dtOld.Rows)
                    {
                        try
                        {
                            lineno++;

                            // データ共通化
                            List<string> values = new List<string>();

                            // データ共通化リスト取得
                            Dictionary<string, string> dic_change = GetChangeList(dtOld, row, dtCommon);

                            foreach (DataColumn col in dtOld.Columns)
                            {
                                string val = string.Empty;
                                if (dic_change.ContainsKey(col.ColumnName))
                                {
                                    val = dic_change[col.ColumnName];
                                }
                                else
                                {
                                    val = row[col.ColumnName].ToString();
                                }
                                values.Add(string.IsNullOrEmpty(val) ? "NULL" : "'" + val + "'");
                            }

                            // isnertコマンド実行
                            command.CommandText =
                                "INSERT INTO " + target_table + " ( " + string.Join(",", cols) + " ) VALUES ( " + string.Join(",", values) + " )";
                            cnt += command.ExecuteNonQuery();
                        }
                        catch (Exception ex)
                        {
                            erro_list.Add(string.Format("{0}行目：{1}", lineno, ex.Message));
                        }

                    }

                    if (erro_list.Count > 0)
                    {
                        transaction.Rollback();
                    }
                    else
                    {
                        // コミット
                        transaction.Commit();

                        ret = cnt;
                    }
                }
                catch (Exception ex)
                {
                    ret = -3;
                    strMsg = ex.Message;
                    try
                    {
                        transaction.Rollback();
                    }
                    catch
                    {
                    }

                }
                finally
                {
                    connection.Close();
                }
            }

            return ret;
        }

        /// <summary>
        /// データ共通化リスト取得
        /// </summary>
        private Dictionary<string, string> GetChangeList(
            DataTable dt,
            DataRow row,
            DataSetMaster.S_COMMONDataTable dtCommon
            )
        {
            Dictionary<string, string> rtn = new Dictionary<string, string>();
            foreach (DataSetMaster.S_COMMONRow comrow in dtCommon)
            {

                string change_col = string.Empty;

                if (!string.IsNullOrEmpty(comrow.ITEM_N1) && dt.Columns.Contains(comrow.ITEM_N1))
                {
                    if (comrow.VALUE1.Equals(row[comrow.ITEM_N1].ToString()))
                    {
                        change_col = comrow.ITEM_N1;
                    }
                    else
                    {
                        continue;
                    }
                }
                if (!string.IsNullOrEmpty(comrow.ITEM_N2) && dt.Columns.Contains(comrow.ITEM_N2))
                {
                    if (comrow.VALUE2.Equals(row[comrow.ITEM_N2].ToString()))
                    {
                        change_col = comrow.ITEM_N2;
                    }
                    else
                    {
                        continue;
                    }
                }
                if (!string.IsNullOrEmpty(comrow.ITEM_N3) && dt.Columns.Contains(comrow.ITEM_N3))
                {
                    if (comrow.VALUE3.Equals(row[comrow.ITEM_N3].ToString()))
                    {
                        change_col = comrow.ITEM_N3;
                    }
                    else
                    {
                        continue;
                    }
                }
                if (!string.IsNullOrEmpty(comrow.ITEM_N4) && dt.Columns.Contains(comrow.ITEM_N4))
                {
                    if (comrow.VALUE4.Equals(row[comrow.ITEM_N4].ToString()))
                    {
                        change_col = comrow.ITEM_N4;
                    }
                    else
                    {
                        continue;
                    }
                }
                if (!string.IsNullOrEmpty(comrow.ITEM_N5) && dt.Columns.Contains(comrow.ITEM_N5))
                {
                    if (comrow.VALUE5.Equals(row[comrow.ITEM_N5].ToString()))
                    {
                        change_col = comrow.ITEM_N5;
                    }
                    else
                    {
                        continue;
                    }
                }
                if (!string.IsNullOrEmpty(comrow.ITEM_N6) && dt.Columns.Contains(comrow.ITEM_N6))
                {
                    if (comrow.VALUE6.Equals(row[comrow.ITEM_N6].ToString()))
                    {
                        change_col = comrow.ITEM_N6;
                    }
                    else
                    {
                        continue;
                    }
                }
                if (!string.IsNullOrEmpty(comrow.ITEM_N7) && dt.Columns.Contains(comrow.ITEM_N7))
                {
                    if (comrow.VALUE7.Equals(row[comrow.ITEM_N7].ToString()))
                    {
                        change_col = comrow.ITEM_N7;
                    }
                    else
                    {
                        continue;
                    }
                }
                if (!string.IsNullOrEmpty(comrow.ITEM_N8) && dt.Columns.Contains(comrow.ITEM_N8))
                {
                    if (comrow.VALUE8.Equals(row[comrow.ITEM_N8].ToString()))
                    {
                        change_col = comrow.ITEM_N8;
                    }
                    else
                    {
                        continue;
                    }
                }
                if (!string.IsNullOrEmpty(comrow.ITEM_N9) && dt.Columns.Contains(comrow.ITEM_N9))
                {
                    if (comrow.VALUE9.Equals(row[comrow.ITEM_N9].ToString()))
                    {
                        change_col = comrow.ITEM_N9;
                    }
                    else
                    {
                        continue;
                    }
                }
                if (!string.IsNullOrEmpty(comrow.ITEM_N10) && dt.Columns.Contains(comrow.ITEM_N10))
                {
                    if (comrow.VALUE10.Equals(row[comrow.ITEM_N10].ToString()))
                    {
                        change_col = comrow.ITEM_N10;
                    }
                    else
                    {
                        continue;
                    }
                }

                rtn[change_col] = comrow.AFTER_VALUE;

            }

            return rtn;
        }

        /// <summary>
        /// 対象テーブル情報の読み込み
        /// </summary>
        /// <param name="strTableName">対象テーブル名</param>
        /// <param name="strMsg">エラーメッセージ</param>
        /// <returns>DataTableのアイテム（列）情報</returns>
        public DataColumnCollection GetTargetColumnInfo(
            string strTableName,
            ref string strMsg
            )
        {
            // DB接続文字列作成
            string connectionString = connectionStringBase + LocalDBName;

            DataTable dt = new DataTable();
            DataColumnCollection cols = null;

            try
            {
                using (OleDbConnection connection = new OleDbConnection(connectionString))
                {
                    connection.Open();

                    // 1件だけ読み込む
                    string queryString = "SELECT TOP 1 * FROM " + strTableName;
                    OleDbDataAdapter adapter = new OleDbDataAdapter(queryString, connection);
                    adapter.Fill(dt);
                    adapter.Dispose();

                    connection.Close();

                    // アイテム（列）情報を設定
                    cols = dt.Columns;

                    // ロス種別追加
                    cols.Add(new DataColumn(Common.ColLossType, typeof(System.String)));

                }
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return cols;
        }

        /// <summary>
        /// 検索処理
        /// </summary>
        /// <param name="strTableName">対象テーブル名</param>
        /// <param name="cols">テーブル情報</param>
        /// <param name="LossTableName">ロス変換テーブル名</param>
        /// <param name="ColLossType">ロス種別アイテム名</param>
        /// <param name="LossItemName">ロス変換対象項目</param>
        /// <param name="strLossTableKey">ロス変換情報テーブル名</param>
        /// <param name="gvCondition">検索条件</param>
        /// <param name="dtFavoriteSort">お気に入り並べ替えテーブル</param>
        /// <param name="Item_nList">項目リスト</param>
        /// <param name="Logical_expList">論理式リスト</param>
        /// <param name="dicConditional">条件式</param>
        /// <param name="dicTableItemName">情報テーブルアイテム名</param>
        /// <param name="dt">読み込みデータ</param>
        /// <param name="dtSchema">列のスキーマ情報</param>
        /// <param name="strMsg">エラーメッセージ</param>
        /// <returns>true/false</returns>
        public bool GetSearchData(
            string strTableName,
            DataColumnCollection cols,
            string LossTableName,
            string ColLossType,
            String LossItemName,
            string strLossTableKey,
            DataGrid gvCondition,
            DataTable dtFavoriteSort,
            List<DataExtractComboBoxItem> Item_nList,
            List<DataExtractComboBoxItem> Logical_expList,
            Dictionary<string, string> dicConditional,
            Dictionary<string, string> dicTableItemName,
            ref DataTable dt,
            ref DataTable dtSchema,
            ref string strMsg
            )
        {
            // DB接続文字列作成
            string connectionString = connectionStringBase + LocalDBName;
            bool ret = true;

            try
            {
                using (OleDbConnection connection = new OleDbConnection(connectionString))
                {
                    // 接続を開く
                    connection.Open();

                    #region "検索文字列の作成"

                    // 対象テーブルの設定
                    string queryString = string.Format("SELECT {0}.*",
                        strTableName);

                    // ロス変換テーブルを連結
                    if (LossItemName != "")
                    {
                        queryString += string.Format(", {0}.{2} FROM {1}",
                            LossTableName, strTableName, ColLossType);
                        queryString += string.Format(
                        " LEFT JOIN {0}"
                        + " ON {1}.{2} = {0}.VALUE",
                        LossTableName, strTableName, LossItemName);
                    }
                    else
                    {
                        queryString += string.Format(", '' AS {1} FROM {0}",
                            strTableName, ColLossType);
                    }

                    // 検索条件の設定
                    int wherecnt = 0;
                    for (int i = 0; i < gvCondition.Items.Count; i++)
                    {
                        // データグリッドの行オブジェクトを取得します。
                        var row = gvCondition.ItemContainerGenerator.ContainerFromIndex(i) as DataGridRow;
                        // 行オブジェクトが取得できない場合
                        if (row == null)
                        {
                            // 対象の行が表示されていない場合、行オブジェクトが取得できないため
                            // 対象の行が表示されるようスクロールします。
                            gvCondition.UpdateLayout();
                            gvCondition.ScrollIntoView(gvCondition.Items[i]);
                            // 再度、行オブジェクトを取得します。
                            row = gvCondition.ItemContainerGenerator.ContainerFromIndex(i) as DataGridRow;
                        }
                        // データグリッドの項目セルオブジェクトを取得します。
                        var colItem_n = gvCondition.Columns[1].GetCellContent(row);
                        //if ((colItem_n as TextBlock)?.Text == null) break;
                        if ((colItem_n.DataContext as DataExtractConditionItem)?.ColItem_n == null) break;

                        if (wherecnt == 0)
                        {
                            queryString += " WHERE (";
                        }
                        else
                        {
                            queryString += " ";
                        }
                        // 項目
                        //string itemName = (colItem_n as TextBlock)?.Text;
                        string itemName = Item_nList[int.Parse((colItem_n.DataContext as DataExtractConditionItem)?.ColItem_n)].Label;

                        // 条件式
                        var colConditional = gvCondition.Columns[2].GetCellContent(row);
                        //string strConditional = dicConditional[(colConditional as TextBlock)?.Text];
                        var intConditional = int.Parse((colConditional.DataContext as DataExtractConditionItem)?.ColConditional);
                        string strConditional = (dicConditional.Values.ToArray()[intConditional - 1] as string);

                        // アイテム名に対応したコードを取得
                        var pair = dicTableItemName.FirstOrDefault(c => c.Value == itemName);
                        string itemCode = pair.Key;

                        // データタイプを取得
                        Type typeItem = cols[itemCode].DataType;

                        #region "値"

                        // 値
                        queryString += " (";

                        // カンマ（,）区切りで複数
                        var colCon_value = gvCondition.Columns[3].GetCellContent(row);
                        //string[] inpValues = (colCon_value as TextBlock)?.Text.Split(',');
                        string[] inpValues = (colCon_value.DataContext as DataExtractConditionItem)?.ColCon_value.Split(',');
                        int valcnt = 0;
                        foreach (string inpVal in inpValues)
                        {
                            if (valcnt > 0)
                            {
                                queryString += " OR ";
                            }
                            if (typeItem != typeof(System.Double))
                            {
                                // 数値でないとき
                                if (strConditional.Equals("LIKE"))
                                {
                                    queryString += (itemCode + " " + strConditional);
                                    queryString += (" '%" + inpVal + "%'");
                                }
                                else
                                {
                                    if (IsDateItem(itemCode))
                                    {
                                        // 日付の場合
                                        queryString += string.Format("DateValue({0}) {1} DateValue('{2}')",
                                            itemCode, strConditional, inpVal);
                                    }
                                    else if (IsTimeItem(itemCode))
                                    {
                                        // 時間の場合
                                        queryString += string.Format("TimeValue({0}) {1} TimeValue('{2}')",
                                            itemCode, strConditional, inpVal);
                                    }
                                    else
                                    {
                                        queryString += (itemCode + " " + strConditional);
                                        queryString += (" '" + inpVal + "'");
                                    }
                                }
                            }
                            else
                            {
                                // 数値のとき
                                queryString += (itemCode + " " + strConditional);
                                queryString += " " + inpVal;
                            }

                            valcnt++;
                        }
                        queryString += ") ";

                        #endregion

                        // 論理式
                        var colLogical_exp = gvCondition.Columns[4].GetCellContent(row);
                        //if ((colLogical_exp as TextBlock)?.Text != null)
                        if ((colLogical_exp.DataContext as DataExtractConditionItem)?.ColLogical_exp != null)
                        {
                            // 次の行に設定がある場合のみ設定
                            if (i < gvCondition.Items.Count - 1)
                            {
                                var rowNext = gvCondition.ItemContainerGenerator.ContainerFromIndex(i + 1) as DataGridRow;
                                var colItem_nNext = gvCondition.Columns[1].GetCellContent(rowNext);
                                //if ((colItem_nNext as TextBlock)?.Text != null)
                                if ((colItem_nNext.DataContext as DataExtractConditionItem)?.ColItem_n != null)
                                {
                                    //queryString += (colLogical_exp as TextBlock)?.Text;
                                    var intLogical_exp = int.Parse((colLogical_exp.DataContext as DataExtractConditionItem)?.ColLogical_exp);
                                    queryString += Logical_expList[intLogical_exp].Label;
                                }
                            }
                        }

                        wherecnt++;
                    }
                    if (wherecnt > 0)
                    {
                        queryString += ") ";
                    }
                    // ロス変換テーブルの条件を追加
                    if (LossItemName != "")
                    {
                        if (wherecnt == 0)
                        {
                            queryString += " WHERE ";
                        }
                        else
                        {
                            queryString += " AND ";
                        }
                        queryString += string.Format("({0}.TABLE_N = '{1}' OR {0}.TABLE_N IS NULL)",
                            LossTableName, strLossTableKey);
                    }

                    // 並べ替え条件の設定
                    int ordercnt = 0;
                    for (int i = 0; i < dtFavoriteSort.Rows.Count; i++)
                    {
                        DataRow row = dtFavoriteSort.Rows[i];

                        if (!row["ORDER_PRIORITY"].ToString().Equals("0"))
                        {
                            if (ordercnt == 0)
                            {
                                queryString += " ORDER BY ";
                            }
                            else
                            {
                                queryString += ", ";
                            }
                            queryString += row["ITEM_N"].ToString();
                            if (row["ORDER_FLG"].ToString().Equals("2"))
                            {
                                queryString += " DESC";
                            }
                            ordercnt++;
                        }
                    }

                    #endregion

                    OleDbDataAdapter adapter = new OleDbDataAdapter(queryString, connection);
                    dt = new DataTable();
                    try
                    {
                        adapter.Fill(dt);
                    }
                    catch { }
                    adapter.Dispose();

                    // 列のスキーマ情報を取得
                    string[] restrictionValues = {
                        null,
                        null,
                        strTableName
                    };
                    dtSchema = connection.GetSchema("Columns", restrictionValues);

                    // 接続を閉じる
                    connection.Close();
                }
            }
            catch (Exception ex)
            {
                strMsg = ex.Message;
                ret = false;
                throw ex;
            }
            finally
            {

            }

            return ret;
        }

        /// <summary>
        /// テーブルアイテムが日付データか判定
        /// </summary>
        /// <param name="itemName">テーブルアイテム名</param>
        /// <returns>true/false</returns>
        private bool IsDateItem(string itemName)
        {
            bool ret = false;

            //if (itemName.ToLower().IndexOf("other_data_1") >= 0)  // for debug
            if (itemName.ToLower().IndexOf("date") >= 0)
            {
                ret = true;
            }

            return ret;
        }

        /// <summary>
        /// テーブルアイテムが時刻データか判定
        /// </summary>
        /// <param name="itemName">テーブルアイテム名</param>
        /// <returns>true/false</returns>
        private bool IsTimeItem(string itemName)
        {
            bool ret = false;

            if (itemName.ToLower().IndexOf("hour") >= 0)
            {
                ret = true;
            }
            else if (itemName.ToLower().IndexOf("time") >= 0)
            {
                ret = true;
            }

            return ret;
        }
    }
}
