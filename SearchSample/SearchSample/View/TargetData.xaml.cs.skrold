using MRILossTool.ViewModel;
using NLog;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace MRILossTool.View
{
    /// <summary>
    /// TargetData.xaml の相互作用ロジック
    /// </summary>
    public partial class TargetData : MahApps.Metro.Controls.MetroWindow
    {
        private static Logger logger = LogManager.GetCurrentClassLogger();

        #region "変数"

        /// <summary>
        /// DBデータ
        /// </summary>
        public DataTable GetDtMain()
        {
            TargetDataViewModel vm = (TargetDataViewModel)DataContext;

            return vm.DtMain;
        }

        /// <summary>
        /// グラフ画面終了フラグ
        /// </summary>
        private bool bolGraphAppClosing = false;
        public bool IsGraphAppClosing { get => bolGraphAppClosing; set => bolGraphAppClosing = value; }

        #endregion

        /// <summary>
        /// 対象リスト画面
        /// </summary>
        public TargetData()
        {
            InitializeComponent();

            // WPF版：テーマ設定
            Common.SettingTheme(this);

            // WPF版：DataGrid ColumnHeaderStyle設定
            Common.SettingColumnHeaderStyle(gvMain);
        }

        /// <summary>
        /// コンストラクタ
        /// </summary>
        /// <param name="dtMain">DB</param>
        public TargetData(
            DataTable dtMain
        )
        {
            InitializeComponent();

            // WPF版：テーマ設定
            Common.SettingTheme(this);

            // WPF版：DataGrid ColumnHeaderStyle設定
            Common.SettingColumnHeaderStyle(gvMain);

            try
            {
                TargetDataViewModel vm = (TargetDataViewModel)DataContext;

                // DBデータセット
                vm.SetDtMain(dtMain);

                // 表示データ設定
                gvMain.ItemsSource = null;
                gvMain.Items.Clear();
                gvMain.Columns.Clear();
                //foreach (DataColumn col in dtMain.Columns)
                //{
                //    if (col.DataType == System.Type.GetType("System.String"))
                //    {
                //        var column = new DataGridTextColumn();
                //        column.Binding = new Binding(col.ColumnName.ToUpper());
                //        column.Header = col.Caption;
                //        gvMain.Columns.Add(column);
                //    }
                //    else
                //    {
                //        var chkcolmun = new DataGridCheckBoxColumn();
                //        chkcolmun.Binding = new Binding(col.ColumnName.ToUpper());
                //        chkcolmun.Header = col.Caption;
                //        gvMain.Columns.Add(chkcolmun);
                //    }
                //}
                gvMain.ItemsSource = vm.DtMain.DefaultView;

                // 列ヘッダを設定
                for (int i = 0; i < gvMain.Columns.Count; i++)
                {
                    gvMain.Columns[i].Header = vm.DtMain.Columns[i].Caption;
                    if (i > 0)
                    {
                        // 「選択」チェックボックス以外は入力不可にする
                        gvMain.Columns[i].IsReadOnly = true;
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
                return;
            }
        }

        /// <summary>
        /// Loadedイベント
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            try
            {
                logger.Info("初期表示");


            }
            catch (Exception ex)
            {
                logger.Error(ex);
                MessageBox.Show(ex.Message);
            }
        }

        /// <summary>
        /// 選択行
        /// </summary>
        /// <returns></returns>
        public DataTable GetSelectedData()
        {
            TargetDataViewModel vm = (TargetDataViewModel)DataContext;

            DataTable dtSelect = new DataTable();
            for (int i = 1; i < vm.DtMain.Columns.Count; i++)
            {
                dtSelect.Columns.Add(vm.DtMain.Columns[i].Caption);
            }
            try
            {
                foreach (DataRowView row in gvMain.Items)
                {
                    if ((Boolean)row["選択"] == true)
                    {
                        DataRow newrow = dtSelect.NewRow();

                        // 先頭のチェックボックス以外をコピー
                        for (int i = 1; i < vm.DtMain.Columns.Count; i++)
                        {
                            newrow[i - 1] = row[i];
                        }
                        dtSelect.Rows.Add(newrow);
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            return dtSelect;
        }

        /// <summary>
        /// ×ボタンクリック
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void MetroWindow_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            // WPF版：グラフ画面終了フラグがONの場合は終了
            if (IsGraphAppClosing == true) return;
            // WPF版：親ウィンドウが終了している場合は終了
            if (Owner == null) return;
            if (Owner.IsVisible == false) return;

            // WPF版：モードレスウィンドウが残ってしまう為、表示中かどうかのチェックをする
            if (this.Visibility == Visibility.Visible)
            {
                // 閉じずに非表示にする
                e.Cancel = true;
                //this.Visibility = Visibility.Hidden;
                this.Visibility = Visibility.Collapsed;
            }
        }

        /// <summary>
        /// 全て　チェックボックスをクリック
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void chkAll_Click(object sender, RoutedEventArgs e)
        {
            foreach (DataRowView row in gvMain.Items)
            {
                row["選択"] = chkAll.IsChecked;
            }
        }
    }
}
