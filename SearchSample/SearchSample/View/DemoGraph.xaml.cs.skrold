using MRILossTool.ViewModel;
using NLog;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace MRILossTool.View
{
    /// <summary>
    /// Graph.xaml の相互作用ロジック
    /// </summary>
    public partial class DemoGraph : MahApps.Metro.Controls.MetroWindow
    {
        private static Logger logger = LogManager.GetCurrentClassLogger();

        #region "定数"

        #endregion

        #region "変数"

        #endregion

        /// <summary>
        /// グラフ表示ツール
        /// </summary>
        public DemoGraph()
        {
            InitializeComponent();

            // WPF版：テーマ設定
            Common.SettingTheme(this);
        }

        /// <summary>
        /// Loadedイベント
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            try
            {
                logger.Info("初期表示");

                DemoGraphViewModel vm = (DemoGraphViewModel)DataContext;

                // WPF版：モードレスウィンドウを非表示にする為、Ownerプロパティを設定する
                vm.FrmTargetData.Owner = this;

                // 会社マスタ読み込み
                if (!GetCustomerMasterData())
                {
                    return;
                }

                // 工場マスタ読み込み
                if (!GetFactoryMasterData())
                {
                    return;
                }

                btnGraph1.IsEnabled = false;
                btnGraph2.IsEnabled = false;
                btnGraph3.IsEnabled = false;
                btnGraph4.IsEnabled = false;

            }
            catch (Exception ex)
            {
                logger.Error(ex);
                MessageBox.Show(ex.Message);
            }
        }

        #region DB処理
        /// <summary>
        /// 会社マスタの読み込み
        /// </summary>
        /// <returns>true/false</returns>
        private bool GetCustomerMasterData()
        {
            bool ret = true;

            // 会社マスタをロード
            try
            {
                DemoGraphViewModel vm = (DemoGraphViewModel)DataContext;

                cmbCompany.Items.Clear();
                cmbCompany.ItemsSource = vm.CustomerDT;
                cmbCompany.SelectedValuePath = "CUST_CD";
                cmbCompany.DisplayMemberPath = "CUST_N";
            }
            catch (Exception ex)
            {
                MessageBox.Show("マスタデータの読み込みに失敗しました。\n" + ex.Message,
                    "DB読み込みエラー", MessageBoxButton.OK, MessageBoxImage.Error);
                ret = false;
            }
            finally
            {

            }

            return ret;
        }

        /// <summary>
        /// 工場マスタの読み込み
        /// </summary>
        /// <returns>true/false</returns>
        private bool GetFactoryMasterData()
        {
            bool ret = true;

            // マスタをロード
            try
            {
                DemoGraphViewModel vm = (DemoGraphViewModel)DataContext;

                DataView view1 = new DataView(vm.FactoryDT);
                view1.RowFilter = "CUST_CD = ''";
                cmbFactory.Items.Clear();
                cmbFactory.ItemsSource = view1;
                cmbFactory.SelectedValuePath = "KOJOCD";
                cmbFactory.DisplayMemberPath = "KOJO_N";

                DataView view2 = new DataView(vm.TargetTableDT);
                view2.RowFilter = "CUST_CD = '' and KOJOCD = ''";
                cmbTargetTable.Items.Clear();
                cmbTargetTable.ItemsSource = view2;
                cmbTargetTable.SelectedValuePath = "TABLE_N";
                cmbTargetTable.DisplayMemberPath = "TABLE_NAME";
            }
            catch (Exception ex)
            {
                MessageBox.Show("マスタデータの読み込みに失敗しました。\n" + ex.Message,
                    "DB読み込みエラー", MessageBoxButton.OK, MessageBoxImage.Error);
                ret = false;
            }
            finally
            {

            }

            return ret;
        }

        /// <summary>
        /// 内部保持データの読み込み
        /// </summary>
        /// <returns>true/false</returns>
        private bool GetLocalDBData()
        {
            bool ret = true;

            DemoGraphViewModel vm = (DemoGraphViewModel)DataContext;

            // TMP_DB_FIXをロードする
            try
            {
                ret = vm.GetLocalDBData(
                    cmbCompany.SelectedValue.ToString(),
                    cmbFactory.SelectedValue.ToString(),
                    cmbTargetTable.SelectedValue.ToString()
                    );
                if (ret == false)
                {
                    MessageBox.Show("保持データの読み込みに失敗しました。",
                        "DB読み込みエラー", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("保持データの読み込みに失敗しました。\n" + ex.Message,
                    "DB読み込みエラー", MessageBoxButton.OK, MessageBoxImage.Error);
                ret = false;
            }
            finally
            {

            }

            return ret;
        }

        #endregion

        #region ボタン
        /// <summary>
        /// (1) 稼働時間　ボタンクリック
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnGraph1_Click(object sender, RoutedEventArgs e)
        {
            DemoGraphViewModel vm = (DemoGraphViewModel)DataContext;

            GraphArea frm1 = new GraphArea(
                vm.FrmTargetData,
                1,
                btnGraph1.Content.ToString()
            );

            frm1.ShowDialog();
        }

        /// <summary>
        /// (2) 計画停止時間　ボタンクリック
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnGraph2_Click(object sender, RoutedEventArgs e)
        {
            DemoGraphViewModel vm = (DemoGraphViewModel)DataContext;

            GraphArea frm1 = new GraphArea(
                vm.FrmTargetData,
                2,
                btnGraph2.Content.ToString()
            );

            frm1.ShowDialog();

        }

        /// <summary>
        /// (3) ライン停止 　ボタンクリック
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnGraph3_Click(object sender, RoutedEventArgs e)
        {
            DemoGraphViewModel vm = (DemoGraphViewModel)DataContext;

            GraphArea frm1 = new GraphArea(
                vm.FrmTargetData,
                3,
                btnGraph3.Content.ToString()
            );

            frm1.ShowDialog();
        }

        /// <summary>
        /// (4) 停止理由　ボタンクリック
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnGraph4_Click(object sender, RoutedEventArgs e)
        {
            DemoGraphViewModel vm = (DemoGraphViewModel)DataContext;

            GraphArea4 frm4 = new GraphArea4(
                vm.FrmTargetData,
                4,
                btnGraph4.Content.ToString()
            );

            frm4.ShowDialog();
        }

        /// <summary>
        /// 閉じる　ボタンクリック
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnEnd_Click(object sender, RoutedEventArgs e)
        {
            this.Close();
        }
        #endregion

        /// <summary>
        /// 会社名コンボボックス選択
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cmbCompany_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            // 工場コンボボックス更新
            DataView viewFactory = cmbFactory.ItemsSource as DataView;
            string cust_cd = cmbCompany.SelectedValue.ToString();
            if (viewFactory != null && cust_cd != null)
            {
                viewFactory.RowFilter = string.Format("CUST_CD = '{0}'", cust_cd);
            }
            else
            {
                viewFactory.RowFilter = "CUST_CD = ''";
            }
            if (cmbTargetTable.SelectedValue != null)
                cmbFactory.SelectedValue = string.Empty;

            // 対象テーブルコンボボックス更新
            DataView viewTargetTable = cmbTargetTable.ItemsSource as DataView;
            viewTargetTable.RowFilter = "CUST_CD = '' and KOJOCD = ''";

            btnGraph1.IsEnabled = false;
            btnGraph2.IsEnabled = false;
            btnGraph3.IsEnabled = false;
            btnGraph4.IsEnabled = false;

            cmbMachine.Items.Clear();
            cmbMachine.Items.Add("");
            cmbMachine.SelectedIndex = 0;
        }

        /// <summary>
        /// 工場名コンボボックス選択
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cmbFactory_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            // 対象テーブルコンボボックス更新
            DataView viewTargetTable = cmbTargetTable.ItemsSource as DataView;
            string cust_cd = cmbCompany.SelectedValue == null ? "" : cmbCompany.SelectedValue.ToString();
            string kojocd = cmbFactory.SelectedValue == null ? "" : cmbFactory.SelectedValue.ToString();
            if (viewTargetTable != null && kojocd != null)
            {
                viewTargetTable.RowFilter = string.Format("CUST_CD = '{0}' and KOJOCD = '{1}'", cust_cd, kojocd);
            }
            else
            {
                viewTargetTable.RowFilter = "CUST_CD = '' and KOJOCD = ''";
            }
            cmbTargetTable.SelectedValue = string.Empty;

            btnGraph1.IsEnabled = false;
            btnGraph2.IsEnabled = false;
            btnGraph3.IsEnabled = false;
            btnGraph4.IsEnabled = false;

            cmbMachine.Items.Clear();
            cmbMachine.Items.Add("");
            cmbMachine.SelectedIndex = 0;
        }

        /// <summary>
        /// 対象テーブルコンボボックス選択
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cmbTargetTable_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            string cust_cd = cmbCompany.Items.Count == 0 ? "" : cmbCompany.SelectedValue.ToString();
            string kojocd = cmbFactory.Items.Count == 0 ? "" : cmbFactory.SelectedValue.ToString();
            string target_table = cmbTargetTable.Items.Count == 0 || cmbTargetTable.SelectedValue == null ? "" : cmbTargetTable.SelectedValue.ToString();

            if (string.IsNullOrEmpty(cust_cd) || string.IsNullOrEmpty(kojocd))
            {
                return;
            }

            btnGraph1.IsEnabled = false;
            btnGraph2.IsEnabled = false;
            btnGraph3.IsEnabled = false;
            btnGraph4.IsEnabled = false;

            if (!string.IsNullOrEmpty(target_table))
            {
                //待機状態
                this.Cursor = Cursors.Wait;
                try
                {
                    DemoGraphViewModel vm = (DemoGraphViewModel)DataContext;

                    // 内部保持データの読み込み
                    if (!GetLocalDBData())
                    {
                        return;
                    }

                    // 対象リスト画面を生成
                    vm.FrmTargetDataClose();
                    vm.FrmTargetData = new TargetData(vm.DtMain);
                    vm.FrmTargetData.Owner = this;

                    // データがあるときは各ボタンを有効にする
                    if (vm.DtMain.Rows.Count > 0)
                    {
                        btnGraph1.IsEnabled = true;
                        btnGraph2.IsEnabled = true;
                        btnGraph3.IsEnabled = true;
                        btnGraph4.IsEnabled = true;
                    }

                    cmbMachine.Items.Clear();
                    cmbMachine.Items.Add("");
                    if (vm.DtMain.Columns.Contains("MACHINE_NAME"))
                    {
                        var machines = vm.DtMain.AsEnumerable().GroupBy(x => x["MACHINE_NAME"].ToString()).OrderBy(x => x.Key);
                        foreach (var machine in machines)
                        {
                            cmbMachine.Items.Add(machine.Key);
                        }
                    }

                }
                finally
                {
                    //元に戻す
                    this.Cursor = null;
                }

            }
        }

        /// <summary>
        /// 設備コンボボックス選択
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cmbMachine_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            // WPF版では初期化で呼び出されてしまうので、スキップする
            if (cmbMachine.SelectedValue == null || (string)cmbMachine.SelectedValue == string.Empty) return;

            string cust_cd = cmbCompany.Items.Count == 0 ? "" : cmbCompany.SelectedValue.ToString();
            string kojocd = cmbFactory.Items.Count == 0 ? "" : cmbFactory.SelectedValue.ToString();
            string target_table = cmbTargetTable.Items.Count == 0 ? "" : cmbTargetTable.SelectedValue.ToString();
            string machine = cmbMachine.SelectedValue.ToString();

            if (string.IsNullOrEmpty(cust_cd) || string.IsNullOrEmpty(kojocd) || string.IsNullOrEmpty(target_table))
            {
                return;
            }

            btnGraph1.IsEnabled = false;
            btnGraph2.IsEnabled = false;
            btnGraph3.IsEnabled = false;
            btnGraph4.IsEnabled = false;

            DemoGraphViewModel vm = (DemoGraphViewModel)DataContext;

            if (string.IsNullOrEmpty(machine))
            {
                //待機状態
                this.Cursor = Cursors.Wait;
                try
                {
                    // 対象リスト画面を生成
                    vm.FrmTargetDataClose();
                    vm.FrmTargetData = new TargetData(vm.DtMain);
                    vm.FrmTargetData.Owner = this;

                    // データがあるときは各ボタンを有効にする
                    if (vm.DtMain.Rows.Count > 0)
                    {
                        btnGraph1.IsEnabled = true;
                        btnGraph2.IsEnabled = true;
                        btnGraph3.IsEnabled = true;
                        btnGraph4.IsEnabled = true;
                    }

                }
                finally
                {
                    //元に戻す
                    this.Cursor = null;
                }

                return;
            }
            // 絞り込み実行
            if (vm.DtMain.Columns.Contains("MACHINE_NAME"))
            {
                //待機状態
                this.Cursor = Cursors.Wait;
                try
                {
                    string where = " MACHINE_NAME = '" + machine + "'";
                    DataRow[] selDt = vm.DtMain.Select(where, "MACHINE_NAME");
                    DataTable dtSelect = vm.DtMain.Clone(); // 構成のみコピー
                    foreach (DataRow row in selDt)
                    {
                        DataRow newrow = dtSelect.NewRow();

                        for (int i = 0; i < row.ItemArray.Length; i++)
                        {
                            newrow[i] = row[i];
                        }
                        dtSelect.Rows.Add(newrow);

                    }

                    // 対象リスト画面を生成
                    vm.FrmTargetDataClose();
                    vm.FrmTargetData = new TargetData(dtSelect);
                    vm.FrmTargetData.Owner = this;

                    // データがあるときは各ボタンを有効にする
                    if (dtSelect.Rows.Count > 0)
                    {
                        btnGraph1.IsEnabled = true;
                        btnGraph2.IsEnabled = true;
                        btnGraph3.IsEnabled = true;
                        btnGraph4.IsEnabled = true;
                    }
                }
                finally
                {
                    //元に戻す
                    this.Cursor = null;
                }

            }
        }

        /// <summary>
        /// ×ボタンクリック
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void MetroWindow_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            DemoGraphViewModel vm = (DemoGraphViewModel)DataContext;

            // WPF版：子ウィンドウは自動で終了しない為、個別に閉じる

            // WPF版：対象リスト画面を閉じる
            vm.FrmTargetDataClose();
        }
    }
}
