using Microsoft.Win32;
using MRILossTool.DataModel;
using MRILossTool.ViewModel;
using NLog;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.OleDb;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace MRILossTool.View
{
    /// <summary>
    /// SettingInMaster.xaml の相互作用ロジック
    /// </summary>
    public partial class SettingInMaster : MahApps.Metro.Controls.MetroWindow
    {
        private static Logger logger = LogManager.GetCurrentClassLogger();

        #region "定数"

        #endregion

        #region "変数"

        #endregion

        /// <summary>
        /// 取込定義マスタメンテナンス
        /// </summary>
        public SettingInMaster()
        {
            InitializeComponent();

            // WPF版：テーマ設定
            Common.SettingTheme(this);

            // WPF版：DataGrid ColumnHeaderStyle設定
            Common.SettingColumnHeaderStyle(gvSettingIn);
        }

        /// <summary>
        /// Loadedイベント
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            try
            {
                logger.Info("初期表示");

                SettingInMasterViewModel vm = (SettingInMasterViewModel)DataContext;

                // 会社マスタの読み込み
                if (!GetCustomerMasterData())
                {
                    return;
                }
                // 対象テーブル

                // 工場マスタの読み込み
                if (!GetFactoryMasterData())
                {
                    return;
                }

                // フォーマット名の読み込み
                if (!GetFormatNameData())
                {
                    return;
                }

                // グリッド初期設定
                gvSettingIn.IsReadOnly = true;              // 読取専用
                gvSettingIn.CanUserDeleteRows = false;      // 行削除禁止
                gvSettingIn.CanUserAddRows = false;         // 行挿入禁止
                gvSettingIn.HeadersVisibility = DataGridHeadersVisibility.Column;   // 先頭列非表示
                gvSettingIn.AutoGenerateColumns = false;    // 列の自動追加禁止
                //gvSettingIn.EnableHeadersVisualStyles = false;

                foreach (string col in vm.ColumnName)
                {
                    DataGridTextColumn textColumn = new DataGridTextColumn();
                    textColumn.Binding = new Binding(col);
                    gvSettingIn.Columns.Add(textColumn);
                    if (col.Equals("FORMAT_N"))
                    {
                        textColumn.Visibility = Visibility.Hidden;
                    }
                }
                for (int i = 0; i < vm.HeaderName.Length; i++)
                {
                    gvSettingIn.Columns[i].Header = vm.HeaderName[i];
                    gvSettingIn.Columns[i].Width = 120;
                }

                //// 置換ボタンの列を追加
                //DataGridViewButtonColumn ReplaceButtonColumn = new DataGridViewButtonColumn();
                //ReplaceButtonColumn.Name = "ReplaceButtonColumn";
                //ReplaceButtonColumn.Text = "置換";
                //ReplaceButtonColumn.HeaderText = "";
                //ReplaceButtonColumn.UseColumnTextForButtonValue = true;
                //gvSettingIn.Columns.Add(ReplaceButtonColumn);

                //// Add a CellClick handler to handle clicks in the button column.
                //gvSettingIn.CellClick += new DataGridViewCellEventHandler(gvSettingIn_CellClick);
            }
            catch (Exception ex)
            {
                logger.Error(ex);
                MessageBox.Show(ex.Message);
            }
        }

        ///// <summary>
        ///// 一覧の「置換」ボタン クリック
        ///// </summary>
        //private void gvSettingIn_CellClick(object sender, DataGridViewCellEventArgs e)
        //{

        //    if (e.ColumnIndex == gvSettingIn.Columns["ReplaceButtonColumn"].Index && e.RowIndex >= 0)
        //    {
        //        String ITEM_N = gvSettingIn.Rows[e.RowIndex].Cells["ITEM_N"].Value as String;
        //        String CHANGE_TYPE = gvSettingIn.Rows[e.RowIndex].Cells["CHANGE_TYPE"].Value as String;
        //        String FORMAT_N = gvSettingIn.Rows[e.RowIndex].Cells["FORMAT_N"].Value as String;

        //        if (!CHANGE_TYPE.Equals("文字変換"))
        //        {
        //            MessageBox.Show("置換定義は変換種類：文字変換の場合のみ可能です。", "置換定義画面表示エラー", MessageBoxButtons.OK, MessageBoxIcon.Error);
        //            return;
        //        }

        //        frmMstReplaceIn frm1 = 
        //            new frmMstReplaceIn(
        //                cmbCustomer.SelectedValue.ToString(),
        //                cmbFactory.SelectedValue.ToString(),
        //                FORMAT_N,
        //                cmbTargetTable.SelectedValue.ToString(),
        //                cmbCustomer.Text,
        //                cmbFactory.Text,
        //                FORMAT_N,
        //                cmbTargetTable.Text,
        //                ITEM_N
        //                );

        //        frm1.ShowDialog();
        //    }
        //}


        /// <summary>
        /// マスタデータ（MDB）の読み込み
        /// </summary>
        private void GetMasterData()
        {
            if (cmbFormatType.SelectedValue == null
                    || string.IsNullOrEmpty(cmbFormatType.SelectedValue.ToString()))
            {
                return;
            }

            try
            {
                SettingInMasterViewModel vm = (SettingInMasterViewModel)DataContext;

                // 取込定義マスタをロードする
                vm.GetMasterData(
                    cmbCustomer.SelectedValue.ToString(),
                    cmbFactory.SelectedValue.ToString(),
                    cmbTargetTable.SelectedValue.ToString(),
                    cmbFormatType.SelectedValue.ToString()
                );

                gvSettingIn.ItemsSource = vm.DtMst;

            }
            catch (Exception ex)
            {
                MessageBox.Show("マスタデータの読み込みに失敗しました。\n" + ex.Message,
                    "DB読み込みエラー", MessageBoxButton.OK, MessageBoxImage.Error);
            }
            finally
            {

            }
        }

        /// <summary>
        /// 会社マスタデータ（MDB）の読み込み
        /// </summary>
        /// <returns>true/false</returns>
        private bool GetCustomerMasterData()
        {
            bool ret = true;

            // 会社マスタをロード
            try
            {
                SettingInMasterViewModel vm = (SettingInMasterViewModel)DataContext;

                // コンボボックスを作成
                cmbCustomer.Items.Clear();
                cmbCustomer.ItemsSource = vm.CustomerDT;
                cmbCustomer.SelectedValuePath = "CUST_CD";
                cmbCustomer.DisplayMemberPath = "CUST_N";
            }
            catch (Exception ex)
            {
                MessageBox.Show("マスタデータの読み込みに失敗しました。\n" + ex.Message,
                    "DB読み込みエラー", MessageBoxButton.OK, MessageBoxImage.Error);
                ret = false;
            }
            finally
            {

            }

            return ret;
        }

        /// <summary>
        /// 工場マスタデータ（MDB）の読み込み
        /// </summary>
        /// <returns>true/false</returns>
        private bool GetFactoryMasterData()
        {
            bool ret = true;

            // マスタをロード
            try
            {
                SettingInMasterViewModel vm = (SettingInMasterViewModel)DataContext;

                // コンボボックスを作成
                DataView view1 = new DataView(vm.FactoryDT);
                view1.RowFilter = "CUST_CD = ''";
                cmbFactory.Items.Clear();
                cmbFactory.ItemsSource = view1;
                cmbFactory.SelectedValuePath = "KOJOCD";
                cmbFactory.DisplayMemberPath = "KOJO_N";

                DataView view2 = new DataView(vm.TargetTableDT);
                view2.RowFilter = "CUST_CD = '' and KOJOCD = ''";
                cmbTargetTable.Items.Clear();
                cmbTargetTable.ItemsSource = view2;
                cmbTargetTable.SelectedValuePath = "TABLE_N";
                cmbTargetTable.DisplayMemberPath = "TABLE_NAME";
            }
            catch (Exception ex)
            {
                MessageBox.Show("マスタデータの読み込みに失敗しました。\n" + ex.Message,
                    "DB読み込みエラー", MessageBoxButton.OK, MessageBoxImage.Error);
                ret = false;
            }
            finally
            {

            }

            return ret;
        }

        /// <summary>
        /// フォーマット名の読み込み
        /// </summary>
        /// <returns>true/false</returns>
        private bool GetFormatNameData()
        {
            bool ret = true;

            // マスタをロード
            try
            {
                SettingInMasterViewModel vm = (SettingInMasterViewModel)DataContext;

                // フォーマット名の読み込み
                if (vm.GetFormatNameData() == true)
                {
                    // コンボボックスを作成
                    DataView view1 = new DataView(vm.FormatNameDT);
                    view1.RowFilter = "CUST_CD = '' and KOJOCD = '' and TABLE_N = ''";
                    cmbFormatType.ItemsSource = null;
                    cmbFormatType.Items.Clear();
                    cmbFormatType.ItemsSource = view1;
                    cmbFormatType.SelectedValuePath = "FORMAT_N";
                    cmbFormatType.DisplayMemberPath = "FORMAT_N";
                }
                else
                {
                    ret = false;
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("マスタデータの読み込みに失敗しました。\n" + ex.Message,
                    "DB読み込みエラー", MessageBoxButton.OK, MessageBoxImage.Error);
                ret = false;
            }
            finally
            {

            }

            return ret;
        }

        /// <summary>
        /// ダウンロード　ボタンクリック
        /// </summary>
        private void btnDownload_Click(object sender, EventArgs e)
        {
            // 入力チェック
            if (!CheckInput(false))
            {
                return;
            }

            // 検索
            GetMasterData();

            SaveFileDialog sfd = new SaveFileDialog();

            // 初期ファイル名を指定
            sfd.FileName = "取込定義マスタ.csv";
            //タイトル設定
            sfd.Title = "保存先のファイルを選択してください";

            //ダイアログ表示
            if (sfd.ShowDialog() == true)
            {
                // マスタデータCSV出力
                Common.outputCSV(sfd.FileName, gvSettingIn);
            }

        }

        /// <summary>
        /// アップロード　ボタンクリック
        /// </summary>
        private void btnUpload_Click(object sender, EventArgs e)
        {
            // 入力チェック
            if (!CheckInput(false))
            {
                return;
            }

            doUpload();
        }

        /// <summary>
        /// アップロード実行
        /// </summary>
        private void doUpload()
        {
            string strPath = string.Empty;
            try
            {
                SettingInMasterViewModel vm = (SettingInMasterViewModel)DataContext;

                // 必ずフォーマット名入力
                hdnFormatType.Text = cmbFormatType.SelectedValue == null
                                        || string.IsNullOrEmpty(cmbFormatType.SelectedValue.ToString()) ? string.Empty : cmbFormatType.SelectedValue.ToString();
                MasterFormatTypeInput frm1 = new MasterFormatTypeInput();
                frm1.FormatTypeName = hdnFormatType.Text;
                if (frm1.ShowDialog() == false)
                {
                    hdnFormatType.Text = string.Empty;
                    return;
                }
                hdnFormatType.Text = frm1.FormatTypeName;

                String filenName;
                OpenFileDialog ofd = new OpenFileDialog();

                ofd.Title = "ファイル選択";                   // ダイアログのタイトル
                ofd.Filter = "CSV ファイル (*.csv)|*.csv";    // CSVファイルでフィルタ

                // ダイアログ オープン
                if (ofd.ShowDialog() == true)
                {
                    string message = "以下の取込定義をアップロードしますか？";
                    message += "\n";
                    message += "\n会社\t\t" + cmbCustomer.Text;
                    message += "\n工場\t\t" + cmbFactory.Text;
                    message += "\n対象テーブル\t" + cmbTargetTable.Text;
                    message += "\nフォーマット名\t" + hdnFormatType.Text;

                    string caption = "アップロード確認";

                    MessageBoxButton buttons = MessageBoxButton.OKCancel;

                    MessageBoxResult result = MessageBox.Show(this, message, caption, buttons, MessageBoxImage.Question);

                    if (result != MessageBoxResult.OK)
                    {
                        return;
                    }

                    filenName = ofd.FileName;

                    // エラー情報
                    List<string> erro_list = new List<string>();
                    string strMsg = "";
                    int ret = 0;

                    // CSVファイルをロード
                    ret = vm.ReadCSVFile(
                        filenName,
                        cmbCustomer.SelectedValue.ToString(),
                        cmbFactory.SelectedValue.ToString(),
                        cmbTargetTable.SelectedValue.ToString(),
                        hdnFormatType.Text,
                        ref erro_list,
                        ref strMsg
                    );

                    if (ret == -1)
                    {
                        MessageBox.Show("CSVファイルの場合はShift-JISまたはUTF-8を指定して下さい。",
                            "文字コードエラー", MessageBoxButton.OK, MessageBoxImage.Error);
                        return;
                    }
                    else if (ret == -2)
                    {
                        MessageBox.Show("CSVファイル読み込みエラー\n" + strMsg);
                        return;
                    }
                    else if (ret == -3)
                    {
                        MessageBox.Show("マスタデータアップロードに失敗しました。\n" + strMsg);
                        return;
                    }
                    else
                    {
                        if (erro_list.Count > 0)
                        {
                            ErrorDialog frm = new ErrorDialog();
                            frm.Message = erro_list;
                            frm.ShowDialog();
                        }
                        else
                        {
                            // フォーマット名再読み込み
                            GetFormatNameData();
                            DataView viewFormatType = cmbFormatType.ItemsSource as DataView;

                            if (viewFormatType != null)
                            {
                                viewFormatType.RowFilter =
                                    String.Format("CUST_CD = '{0}' and KOJOCD = '{1}' and TABLE_N = '{2}'",
                                    cmbCustomer.SelectedValue.ToString(), cmbFactory.SelectedValue.ToString(), cmbTargetTable.SelectedValue.ToString());
                                cmbFormatType.SelectedValue = hdnFormatType.Text;
                            }
                            // 検索
                            GetMasterData();

                            MessageBox.Show(ret.ToString() + "件追加しました。");
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            finally
            {
                hdnFormatType.Text = string.Empty;
            }
        }

        /// <summary>
        /// 削除実行
        /// </summary>
        private bool doDelete()
        {
            bool ret = true;

            try
            {
                SettingInMasterViewModel vm = (SettingInMasterViewModel)DataContext;

                // マスタ削除
                String cust_cd = cmbCustomer.SelectedValue.ToString();
                String kojocd = cmbFactory.SelectedValue.ToString();
                String target_table = cmbTargetTable.SelectedValue.ToString();
                String format_type = cmbFormatType.SelectedValue.ToString();
                string strMsg = "";
                int delcnt = 0;

                ret = vm.DeleteMasterData(
                    cust_cd,
                    kojocd,
                    target_table,
                    format_type,
                    ref delcnt,
                    ref strMsg
                );
                if (ret == true)
                {
                    // 一覧再表示
                    gvSettingIn.ItemsSource = vm.DtMst;

                    // フォーマット名再読み込み
                    DataView view1 = new DataView(vm.FormatNameDT);
                    view1.RowFilter = String.Format("CUST_CD = '{0}' and KOJOCD = '{1}' and TABLE_N = '{2}'", cust_cd, kojocd, target_table);
                    cmbFormatType.ItemsSource = null;
                    cmbFormatType.Items.Clear();
                    cmbFormatType.ItemsSource = view1;
                    cmbFormatType.SelectedValuePath = "FORMAT_N";
                    cmbFormatType.DisplayMemberPath = "FORMAT_N";

                    MessageBox.Show(delcnt.ToString() + "件削除しました。");
                }
                else
                {
                    MessageBox.Show("マスタデータ削除に失敗しました。\n" + strMsg,
                        "DB削除エラー", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("マスタデータ削除に失敗しました。\n" + ex.Message,
                    "DB削除エラー", MessageBoxButton.OK, MessageBoxImage.Error);
            }
            finally
            {
            }

            return ret;
        }


        /// <summary>
        /// 閉じる　ボタンクリック
        /// </summary>
        private void btnClose_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        /// <summary>
        /// 検索　ボタンクリック
        /// </summary>
        private void btnSearch_Click(object sender, EventArgs e)
        {

            // 入力チェック
            if (!CheckInput())
            {
                return;
            }

            // 検索
            GetMasterData();
        }

        /// <summary>
        /// 会社名コンボボックス選択
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cmbCustomer_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            // 工場コンボボックス更新
            DataView viewFactory = cmbFactory.ItemsSource as DataView;
            String cust_cd = null;
            if (cmbCustomer.SelectedValue != null) cust_cd = cmbCustomer.SelectedValue.ToString();
            if (viewFactory != null && cust_cd != null)
            {
                viewFactory.RowFilter = String.Format("CUST_CD = '{0}'", cust_cd);
            }
            else
            {
                viewFactory.RowFilter = "CUST_CD = ''";
            }
            cmbFactory.SelectedValue = string.Empty;

            // 対象テーブルコンボボックス更新
            DataView viewTargetTable = cmbTargetTable.ItemsSource as DataView;
            viewTargetTable.RowFilter = "CUST_CD = '' and KOJOCD = ''";

            // フォーマット名コンボボックス更新
            DataView viewFormatType = cmbFormatType.ItemsSource as DataView;
            viewFormatType.RowFilter = "CUST_CD = '' and KOJOCD = '' and TABLE_N = ''";

        }

        /// <summary>
        /// 工場名コンボボックス選択
        /// </summary>
        private void cmbFactory_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            // 対象テーブルコンボボックス更新
            DataView viewTargetTable = cmbTargetTable.ItemsSource as DataView;
            String cust_cd = null;
            if (cmbCustomer.SelectedValue != null) cust_cd = cmbCustomer.SelectedValue.ToString();
            String kojocd = null;
            if (cmbFactory.SelectedValue != null) kojocd = cmbFactory.SelectedValue.ToString();
            if (viewTargetTable != null && kojocd != null)
            {
                viewTargetTable.RowFilter = String.Format("CUST_CD = '{0}' and KOJOCD = '{1}'", cust_cd, kojocd);
            }
            else
            {
                viewTargetTable.RowFilter = "CUST_CD = '' and KOJOCD = ''";
            }
            cmbTargetTable.SelectedValue = string.Empty;

            // フォーマット名コンボボックス更新
            DataView viewFormatType = cmbFormatType.ItemsSource as DataView;
            viewFormatType.RowFilter = "CUST_CD = '' and KOJOCD = '' and TABLE_N = ''";

        }

        /// <summary>
        /// 対象テーブルコンボボックス選択
        /// </summary>
        private void cmbTargetTable_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            DataView viewFormatType = cmbFormatType.ItemsSource as DataView;
            String cust_cd = null;
            if (cmbCustomer.SelectedValue != null) cust_cd = cmbCustomer.SelectedValue.ToString();
            String kojocd = null;
            if (cmbFactory.SelectedValue != null) kojocd = cmbFactory.SelectedValue.ToString();
            String target_table = null;
            if (cmbTargetTable.SelectedValue != null) target_table = cmbTargetTable.SelectedValue.ToString();
            if (viewFormatType != null && kojocd != null)
            {
                viewFormatType.RowFilter = String.Format("CUST_CD = '{0}' and KOJOCD = '{1}' and TABLE_N = '{2}'", cust_cd, kojocd, target_table);
            }
            else
            {
                viewFormatType.RowFilter = "CUST_CD = '' and KOJOCD = '' and TABLE_N = ''";
            }
            cmbFormatType.SelectedValue = string.Empty;
        }

        /// <summary>
        /// フォーマット名コンボボックス選択
        /// </summary>
        private void cmbFormatType_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {

        }

        /// <summary>
        /// 削除　ボタンクリック
        /// </summary>
        private void btnDelete_Click(object sender, EventArgs e)
        {
            // 入力チェック
            if (!CheckInput())
            {
                return;
            }

            string message = "以下の取込定義を削除しますか？";
            message += "\n※関連する置換定義も削除されます。";
            message += "\n";
            message += "\n会社\t\t" + cmbCustomer.Text;
            message += "\n工場\t\t" + cmbFactory.Text;
            message += "\n対象テーブル\t" + cmbTargetTable.Text;
            message += "\nフォーマット名\t" + cmbFormatType.Text;

            string caption = "削除";

            MessageBoxButton buttons = MessageBoxButton.OKCancel;

            MessageBoxResult result = MessageBox.Show(this, message, caption, buttons, MessageBoxImage.Question);

            if (result == MessageBoxResult.OK)
            {
                // 削除実行
                if (!doDelete())
                {
                    return;
                }

            }
        }

        /// <summary>
        /// 置換定義　ボタンクリック
        /// </summary>
        private void btnReplace_Click(object sender, EventArgs e)
        {
            // 入力チェック
            if (!CheckInput())
            {
                return;
            }
            ReplaceInMaster frm1 =
                new ReplaceInMaster(
                    cmbCustomer.SelectedValue.ToString(),
                    cmbFactory.SelectedValue.ToString(),
                    cmbFormatType.SelectedValue.ToString(),
                    cmbTargetTable.SelectedValue.ToString(),
                    cmbCustomer.Text,
                    cmbFactory.Text,
                    cmbFormatType.SelectedValue.ToString(),
                    cmbTargetTable.Text
                    );

            frm1.ShowDialog();
        }

        /// <summary>
        /// 入力チェック
        /// </summary>
        /// <returns></returns>
        private bool CheckInput(bool CheckFormatType = true)
        {
            if (cmbCustomer.SelectedValue == null || string.IsNullOrEmpty(cmbCustomer.SelectedValue.ToString()))
            {
                MessageBox.Show("会社が選択されていません", "必須エラー", MessageBoxButton.OK, MessageBoxImage.Error);
                return false;
            }
            if (cmbFactory.SelectedValue == null || string.IsNullOrEmpty(cmbFactory.SelectedValue.ToString()))
            {
                MessageBox.Show("工場が選択されていません", "必須エラー", MessageBoxButton.OK, MessageBoxImage.Error);
                return false;
            }
            if (cmbTargetTable.SelectedValue == null || string.IsNullOrEmpty(cmbTargetTable.SelectedValue.ToString()))
            {
                MessageBox.Show("対象テーブルが選択されていません", "必須エラー", MessageBoxButton.OK, MessageBoxImage.Error);
                return false;
            }
            if (CheckFormatType)
            {
                if (cmbFormatType.SelectedValue == null || string.IsNullOrEmpty(cmbFormatType.SelectedValue.ToString()))
                {
                    MessageBox.Show("フォーマット名が選択されていません", "必須エラー", MessageBoxButton.OK, MessageBoxImage.Error);
                    return false;
                }
            }

            return true;
        }
    }
}