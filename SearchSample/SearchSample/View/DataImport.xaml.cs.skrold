using Microsoft.Win32;
using MRILossTool.DataModel;
using MRILossTool.ViewModel;
using NLog;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.OleDb;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace MRILossTool.View
{
    /// <summary>
    /// DataImport.xaml の相互作用ロジック
    /// </summary>
    public partial class DataImport : MahApps.Metro.Controls.MetroWindow
    {
        private static Logger logger = LogManager.GetCurrentClassLogger();

        #region "定数"

        #endregion

        #region "変数"

        #endregion

        /// <summary>
        /// データ取込
        /// </summary>
        public DataImport()
        {
            InitializeComponent();

            // WPF版：テーマ設定
            Common.SettingTheme(this);
        }

        /// <summary>
        /// Loadedイベント
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            try
            {
                logger.Info("初期表示");

                DataImportViewModel vm = (DataImportViewModel)DataContext;

                // 会社マスタ読み込み
                if (!GetCustomerMasterData())
                {
                    return;
                }

                // 工場マスタ読み込み
                if (!GetFactoryMasterData())
                {
                    return;
                }

                // フォーマット名読み込み
                if (!GetFormatNameData())
                {
                    return;
                }
            }
            catch (Exception ex)
            {
                logger.Error(ex);
                MessageBox.Show(ex.Message);
            }
        }

        #region DB処理
        /// <summary>
        /// 会社マスタの読み込み
        /// </summary>
        /// <returns>true/false</returns>
        private bool GetCustomerMasterData()
        {
            bool ret = true;

            // 会社マスタをロード
            try
            {
                DataImportViewModel vm = (DataImportViewModel)DataContext;

                // コンボボックスを作成
                cmbCompany.Items.Clear();
                cmbCompany.ItemsSource = vm.CustomerDT;
                cmbCompany.SelectedValuePath = "CUST_CD";
                cmbCompany.DisplayMemberPath = "CUST_N";
            }
            catch (Exception ex)
            {
                MessageBox.Show("マスタデータの読み込みに失敗しました。\n" + ex.Message,
                    "DB読み込みエラー", MessageBoxButton.OK, MessageBoxImage.Error);
                ret = false;
            }
            finally
            {

            }

            return ret;
        }

        /// <summary>
        /// 工場マスタの読み込み
        /// </summary>
        /// <returns>true/false</returns>
        private bool GetFactoryMasterData()
        {
            bool ret = true;

            // マスタをロード
            try
            {
                DataImportViewModel vm = (DataImportViewModel)DataContext;

                // コンボボックスを作成
                DataView view1 = new DataView(vm.FactoryDT);
                view1.RowFilter = "CUST_CD = ''";
                cmbFactory.Items.Clear();
                cmbFactory.ItemsSource = view1;
                cmbFactory.SelectedValuePath = "KOJOCD";
                cmbFactory.DisplayMemberPath = "KOJO_N";

                DataView view2 = new DataView(vm.TargetTableDT);
                view2.RowFilter = "CUST_CD = '' and KOJOCD = ''";
                cmbTargetTable.Items.Clear();
                cmbTargetTable.ItemsSource = view2;
                cmbTargetTable.SelectedValuePath = "TABLE_N";
                cmbTargetTable.DisplayMemberPath = "TABLE_NAME";
            }
            catch (Exception ex)
            {
                MessageBox.Show("マスタデータの読み込みに失敗しました。\n" + ex.Message,
                    "DB読み込みエラー", MessageBoxButton.OK, MessageBoxImage.Error);
                ret = false;
            }
            finally
            {

            }

            return ret;
        }

        /// <summary>
        /// フォーマット名の読み込み
        /// </summary>
        /// <returns>true/false</returns>
        private bool GetFormatNameData()
        {
            bool ret = true;

            // マスタをロード
            try
            {
                DataImportViewModel vm = (DataImportViewModel)DataContext;

                // コンボボックスを作成
                DataView view1 = new DataView(vm.FormatNameDT);
                view1.RowFilter = "CUST_CD = '' and KOJOCD = '' and TABLE_N = ''";
                cmbFormatType.ItemsSource = null;
                cmbFormatType.Items.Clear();
                cmbFormatType.ItemsSource = view1;
                cmbFormatType.SelectedValuePath = "FORMAT_N";
                cmbFormatType.DisplayMemberPath = "FORMAT_N";
            }
            catch (Exception ex)
            {
                MessageBox.Show("マスタデータの読み込みに失敗しました。\n" + ex.Message,
                    "DB読み込みエラー", MessageBoxButton.OK, MessageBoxImage.Error);
                ret = false;
            }
            finally
            {

            }

            return ret;
        }

        /// <summary>
        /// 対象テーブルの読み込み
        /// </summary>
        /// <returns>true/false</returns>
        private bool GetTargetTable()
        {
            bool ret = true;

            try
            {
                DataImportViewModel vm = (DataImportViewModel)DataContext;

                // 対象テーブルの読み込み
                ret = vm.GetTargetTable(
                    cmbTargetTable.SelectedValue.ToString()
                );
                if (ret == true)
                {

                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("マスタデータの読み込みに失敗しました。\n" + ex.Message,
                    "DB読み込みエラー", MessageBoxButton.OK, MessageBoxImage.Error);
                ret = false;
            }
            finally
            {

            }

            return ret;
        }


        /// <summary>
        /// 対象テーブルへデータ追加
        /// </summary>
        /// <param name="dtAdd">追加データ</param>
        /// <returns>true/false</returns>
        private bool InsertTargetTableData(DataTable dtAdd)
        {
            bool ret = true;            // 戻り値を設定

            DataImportViewModel vm = (DataImportViewModel)DataContext;

            // 対象テーブル情報読み込み
            if (!GetTargetTable())
            {
                return false;
            }

            // エラー情報
            List<string> erro_list = new List<string>();
            string strMsg = "";
            int cnt = 0;

            try
            {
                // 対象テーブルへデータ追加
                cnt = vm.InsertTargetTableData(
                    cmbCompany.Text,
                    cmbCompany.SelectedValue.ToString(),
                    cmbFactory.Text,
                    cmbFactory.SelectedValue.ToString(),
                    cmbTargetTable.SelectedValue.ToString(),
                    ref dtAdd,
                    ref erro_list,
                    ref strMsg
                    );

                if (cnt == -3)
                {
                    MessageBox.Show("対象テーブルデータの更新に失敗しました。\n" + strMsg);
                    return false;
                }
                else
                {
                    if (erro_list.Count > 0)
                    {
                        ErrorDialog frm = new ErrorDialog();
                        frm.Message = erro_list;
                        frm.ShowDialog();
                    }
                    else
                    {
                        MessageBox.Show(cnt.ToString() + "件追加しました。");
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("対象テーブルデータの更新に失敗しました。\n" + ex.Message,
                    "DB更新エラー", MessageBoxButton.OK, MessageBoxImage.Error);
            }
            finally
            {

            }

            this.Cursor = null;     // デフォルトカーソルにする

            return ret;
        }

        /// <summary>
        /// 休憩時間合計算出
        /// </summary>
        private double CalcTotalBreakInterval(DateTime start_time, DateTime end_time)
        {

            double interval = 0;

            DataImportViewModel vm = (DataImportViewModel)DataContext;

            try
            {
                interval = vm.CalcTotalBreakInterval(start_time, end_time);
            }
            catch { }

            return interval;

        }

        /// <summary>
        /// 対象テーブルのデータ削除
        /// </summary>
        /// <returns>true/false</returns>
        private bool DeleteTargetTablegData()
        {
            bool ret = true;            // 戻り値を設定

            DataImportViewModel vm = (DataImportViewModel)DataContext;

            string strMsg = "";
            int cnt = 0;

            try
            {
                // 対象テーブルのデータ削除
                cnt = vm.DeleteTargetTablegData(
                    cmbCompany.SelectedValue.ToString(),
                    cmbFactory.SelectedValue.ToString(),
                    txtFromDate.Text,
                    txtToDate.Text,
                    cmbTargetTable.SelectedValue.ToString(),
                    ref strMsg
                    );

                if (cnt == -3)
                {
                    MessageBox.Show("保持データの更新に失敗しました。\n" + strMsg);
                    ret = false;
                }
                else
                {
                    MessageBox.Show(cnt.ToString() + "件削除しました。");
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("保持データの更新に失敗しました。\n" + ex.Message,
                    "DB更新エラー", MessageBoxButton.OK, MessageBoxImage.Error);
                ret = false;
            }

            return ret;
        }

        /// <summary>
        /// 取込定義マスタの読み込み
        /// </summary>
        /// <returns>true/false</returns>
        private bool GetPosDefineData()
        {
            bool ret = true;

            DataImportViewModel vm = (DataImportViewModel)DataContext;

            try
            {
                // 取込定義マスタをロードする
                vm.GetPosDefineData(
                    cmbCompany.SelectedValue.ToString(),
                    cmbFactory.SelectedValue.ToString(),
                    cmbTargetTable.SelectedValue.ToString(),
                    cmbFormatType.SelectedValue.ToString(),
                    ""
                    );
            }
            catch (Exception ex)
            {
                MessageBox.Show("取込定義マスタの読み込みに失敗しました。\n" + ex.Message,
                    "DB読み込みエラー", MessageBoxButton.OK, MessageBoxImage.Error);
                ret = false;
            }
            finally
            {

            }

            return ret;
        }
        #endregion

        /// <summary>
        /// データクリア　ボタンクリック
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnDataClear_Click(object sender, EventArgs e)
        {
            if (cmbCompany.SelectedValue == null || string.IsNullOrEmpty(cmbCompany.SelectedValue.ToString()))
            {
                MessageBox.Show("会社が選択されていません", "必須入力エラー", MessageBoxButton.OK, MessageBoxImage.Error);
                return;
            }
            if (cmbFactory.SelectedValue == null || string.IsNullOrEmpty(cmbFactory.SelectedValue.ToString()))
            {
                MessageBox.Show("工場が選択されていません", "必須入力エラー", MessageBoxButton.OK, MessageBoxImage.Error);
                return;
            }
            if (cmbTargetTable.SelectedValue == null || string.IsNullOrEmpty(cmbTargetTable.SelectedValue.ToString()))
            {
                MessageBox.Show("対象テーブルが選択されていません", "必須入力エラー", MessageBoxButton.OK, MessageBoxImage.Error);
                return;
            }
            //if (cmbFormatType.SelectedValue == null || string.IsNullOrEmpty(cmbFormatType.SelectedValue.ToString()))
            //{
            //    MessageBox.Show("フォーマットタイプが選択されていません", "必須入力エラー", MessageBoxButton.OK, MessageBoxImage.Error);
            //    return;
            //}

            //if (string.IsNullOrEmpty(txtFromDate.Text))
            //{
            //    MessageBox.Show("日付(From)が入力されていません", "必須入力エラー", MessageBoxButton.OK, MessageBoxImage.Error);
            //    return;
            //}

            //if (string.IsNullOrEmpty(txtToDate.Text))
            //{
            //    MessageBox.Show("日付(To)が入力されていません", "必須入力エラー", MessageBoxButton.OK, MessageBoxImage.Error);
            //    return;
            //}

            //if (dtMain.Rows.Count == 0) return;

            try
            {
                // 入力フォーマットチェック
                string strFormat = "yyyyMMdd";

                if (txtFromDate.Text != "")
                {
                    try
                    {
                        DateTime dFrom = DateTime.ParseExact(txtFromDate.Text, strFormat, null);
                    }
                    catch
                    {
                        MessageBox.Show("yyyymmdd形式で入力してください。", "入力エラー", MessageBoxButton.OK, MessageBoxImage.Error);
                        txtFromDate.Focus();
                        return;
                    }
                }

                if (txtToDate.Text != "")
                {

                    try
                    {
                        DateTime dTo = DateTime.ParseExact(txtToDate.Text, strFormat, null);
                    }
                    catch
                    {
                        MessageBox.Show("yyyymmdd形式で入力してください。", "入力エラー", MessageBoxButton.OK, MessageBoxImage.Error);
                        txtToDate.Focus();
                        return;
                    }
                }

                // 対象テーブルデータ削除
                this.Cursor = Cursors.Wait;     // 待機カーソルにする
                DeleteTargetTablegData();

                //// 内部保持データの削除
                //if (!DeleteLocalDBData())
                //{
                //    return;
                //}

                //// 指定年月のデータを削除する
                //if (txtYearMonth.Text != "")
                //{
                //    DataRow[] selDt = dtMain.Select("稼働月 <> '" + txtYearMonth.Text + "'", "");
                //    DataTable dtSelect = dtMain.Clone();    // 構成のみコピー
                //    foreach (DataRow row in selDt)
                //    {
                //        DataRow newrow = dtSelect.NewRow();

                //        for (int i = 0; i < row.ItemArray.Length; i++)
                //        {
                //            newrow[i] = row[i];
                //        }
                //        dtSelect.Rows.Add(newrow);
                //    }
                //    dtMain.Clear();
                //    dtMain = dtSelect.Copy();

                //    // 対象リスト画面を生成
                //    frmTargetData = new frmTargetData(dtMain);

                //}
                //else
                //{
                //    // 未指定の場合は全てのデータをクリア
                //    dtMain.Clear();
                //}
                //// データがないときは各ボタンを無効にする
                //if (dtMain.Rows.Count == 0)
                //{
                //    btnGraph1.Enabled = false;
                //    btnGraph2.Enabled = false;
                //    btnGraph3.Enabled = false;
                //    btnGraph4.Enabled = false;
                //}
            }
            catch
            {

            }

            this.Cursor = null;     // デフォルトカーソルにする
        }

        /// <summary>
        /// ファイル選択　ボタンクリック
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        /// <remarks>
        /// Excelファイル（XLSX）、CSVファイル読み込み
        /// CSVファイルはの文字コードはShift-JIS
        /// </remarks>
        private void btnSelectFile_Click(object sender, EventArgs e)
        {
            if (cmbCompany.SelectedValue == null || string.IsNullOrEmpty(cmbCompany.SelectedValue.ToString()))
            {
                MessageBox.Show("会社が選択されていません", "必須入力エラー", MessageBoxButton.OK, MessageBoxImage.Error);
                return;
            }
            if (cmbFactory.SelectedValue == null || string.IsNullOrEmpty(cmbFactory.SelectedValue.ToString()))
            {
                MessageBox.Show("工場が選択されていません", "必須入力エラー", MessageBoxButton.OK, MessageBoxImage.Error);
                return;
            }
            if (cmbTargetTable.SelectedValue == null || string.IsNullOrEmpty(cmbTargetTable.SelectedValue.ToString()))
            {
                MessageBox.Show("対象テーブルが選択されていません", "必須入力エラー", MessageBoxButton.OK, MessageBoxImage.Error);
                return;
            }
            if (cmbFormatType.SelectedValue == null || string.IsNullOrEmpty(cmbFormatType.SelectedValue.ToString()))
            {
                MessageBox.Show("フォーマット名が選択されていません", "必須入力エラー", MessageBoxButton.OK, MessageBoxImage.Error);
                return;
            }

            this.Cursor = Cursors.Wait;     // 待機カーソルにする

            // 取込定義ファイルの読み込み
            if (!GetPosDefineData())
            {
                this.Cursor = null;         // デフォルトカーソルにする
                return;
            }

            // データファイルの読み込み
            try
            {
                DataImportViewModel vm = (DataImportViewModel)DataContext;

                OpenFileDialog openExcelFileDialog = new OpenFileDialog();

                openExcelFileDialog.Filter = "import file|*.xlsx;*.csv";    // XLS,CSVファイルでフィルタ

                // 使用ファイルを指定する
                if (openExcelFileDialog.ShowDialog() == true)
                {
                    txtDBName.Text = openExcelFileDialog.FileName;

                    string strMsg = "";
                    int ret = 0;

                    DataTable dtAdd = new DataTable();

                    // CSVファイルをロード
                    ret = vm.ReadCSVFile(
                        txtDBName.Text,
                        cmbTargetTable.SelectedValue.ToString(),
                        ref dtAdd,
                        ref strMsg
                    );

                    if (ret == -1)
                    {
                        MessageBox.Show("CSVファイルの場合はShift-JISまたはUTF-8を指定して下さい。",
                            "文字コードエラー", MessageBoxButton.OK, MessageBoxImage.Error);
                        return;
                    }
                    else if (ret == -2)
                    {
                        MessageBox.Show("CSVファイル読み込みエラー\n" + strMsg);
                        return;
                    }
                    else if (ret == -3)
                    {
                        MessageBox.Show("データアップロードに失敗しました。\n" + strMsg);
                        return;
                    }
                    else if (ret == -4)
                    {
                        MessageBox.Show("MS-Excelファイルを指定してください。", "ファイルエラー", MessageBoxButton.OK, MessageBoxImage.Error);
                        return;
                    }
                    else
                    {
                        // 対象テーブルデータの追加
                        if (!InsertTargetTableData(dtAdd))
                        {
                            return;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }

            this.Cursor = null;         // デフォルトカーソルにする
        }


        /// <summary>
        /// 閉じる　ボタンクリック
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnClose_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        /// <summary>
        /// 会社名コンボボックス選択
        /// </summary>
        private void cmbCompany_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            // 工場コンボボックス更新
            DataView viewFactory = cmbFactory.ItemsSource as DataView;
            String cust_cd = cmbCompany.SelectedValue.ToString();
            if (viewFactory != null && cust_cd != null)
            {
                viewFactory.RowFilter = String.Format("CUST_CD = '{0}'", cust_cd);
            }
            else
            {
                viewFactory.RowFilter = "CUST_CD = ''";
            }
            cmbFactory.SelectedValue = string.Empty;

            // 対象テーブルコンボボックス更新
            DataView viewTargetTable = cmbTargetTable.ItemsSource as DataView;
            viewTargetTable.RowFilter = "CUST_CD = '' and KOJOCD = ''";

            // フォーマット名コンボボックス更新
            DataView viewFormatType = cmbFormatType.ItemsSource as DataView;
            viewFormatType.RowFilter = "CUST_CD = '' and KOJOCD = '' and TABLE_N = ''";
        }

        /// <summary>
        /// 工場名コンボボックス選択
        /// </summary>
        private void cmbFactory_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            // 対象テーブルコンボボックス更新
            DataView viewTargetTable = cmbTargetTable.ItemsSource as DataView;
            String cust_cd = cmbCompany.SelectedValue.ToString();
            String kojocd = cmbFactory.SelectedValue.ToString();
            if (viewTargetTable != null && kojocd != null)
            {
                viewTargetTable.RowFilter = String.Format("CUST_CD = '{0}' and KOJOCD = '{1}'", cust_cd, kojocd);
            }
            else
            {
                viewTargetTable.RowFilter = "CUST_CD = '' and KOJOCD = ''";
            }
            cmbTargetTable.SelectedValue = string.Empty;

            // フォーマット名コンボボックス更新
            DataView viewFormatType = cmbFormatType.ItemsSource as DataView;
            viewFormatType.RowFilter = "CUST_CD = '' and KOJOCD = '' and TABLE_N = ''";
        }

        /// <summary>
        /// 対象テーブルコンボボックス選択
        /// </summary>
        private void cmbTargetTable_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            // WPF版では初期化で呼び出されてしまうので、スキップする
            if (cmbTargetTable.SelectedValue == null || (string)cmbTargetTable.SelectedValue == string.Empty) return;

            DataView viewFormatType = cmbFormatType.ItemsSource as DataView;
            String cust_cd = cmbCompany.SelectedValue.ToString();
            String kojocd = cmbFactory.SelectedValue.ToString();
            String target_table = cmbTargetTable.SelectedValue.ToString();
            if (viewFormatType != null && kojocd != null)
            {
                viewFormatType.RowFilter = String.Format("CUST_CD = '{0}' and KOJOCD = '{1}' and TABLE_N = '{2}'", cust_cd, kojocd, target_table);
            }
            else
            {
                viewFormatType.RowFilter = "CUST_CD = '' and KOJOCD = '' and TABLE_N = ''";
            }
            cmbFormatType.SelectedValue = string.Empty;

        }
    }
}
