using MRILossTool.ViewModel;
using NLog;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using static MRILossTool.DataExtractClass;

namespace MRILossTool.View
{
    /// <summary>
    /// FavoriteSort.xaml の相互作用ロジック
    /// </summary>
    public partial class FavoriteSort : MahApps.Metro.Controls.MetroWindow
    {
        private static Logger logger = LogManager.GetCurrentClassLogger();

        #region "定数"

        #endregion

        #region "変数"

        #endregion

        /// <summary>
        /// DataGrid用並べ替え設定リスト
        /// </summary>
        private ObservableCollection<DataExtractSortItem> favoriteSortList;

        public ObservableCollection<DataExtractSortItem> FavoriteSortList { get => favoriteSortList; set => favoriteSortList = value; }

        /// <summary>
        /// 並び替え設定画面
        /// </summary>
        public FavoriteSort()
        {
            InitializeComponent();

            // WPF版：テーマ設定
            Common.SettingTheme(this);

            // WPF版：DataGrid ColumnHeaderStyle設定
            Common.SettingColumnHeaderStyle(gvList);
        }

        /// <summary>
        /// コンストラクタ
        /// </summary>
        /// <param name="favoriteID">お気に入りID</param>
        /// <param name="tableId">対象テーブルID</param>
        /// <param name="tableName">対象テーブル名</param>
        /// <param name="paradtFavoriteSort">お気に入り並べ替えテーブル</param>
        public FavoriteSort(String favoriteID, String tableId, String tableName,
            DataTable paradtFavoriteSort,
            Dictionary<string, string>.ValueCollection dicTableItemNameValues
            )
        {
            InitializeComponent();

            // WPF版：テーマ設定
            Common.SettingTheme(this);

            // WPF版：DataGrid ColumnHeaderStyle設定
            Common.SettingColumnHeaderStyle(gvList);

            FavoriteSortViewModel vm = (FavoriteSortViewModel)DataContext;

            // お気に入りIDを設定
            vm.FavoriteID = favoriteID;

            // 対象テーブルを設定
            vm.SetTargetTable(tableId, tableName);
            txtTargetTable.Text = vm.TargetTableName;
            vm.DicTableItemNameValues = dicTableItemNameValues;

            // お気に入り並べ替えテーブルを設定
            vm.DtFavoriteSort = paradtFavoriteSort;

            /*
            // テーブルの項目コンボボックスを作成
            DataGridViewComboBoxColumn colItemN = new DataGridViewComboBoxColumn();
            colItemN.Items.Add("");
            foreach (string item in frmDataExtract.dicTableItemName[tableName].Values)
            {
                colItemN.Items.Add(item);
            }
            string colName = "colitem_n";
            colItemN.DataPropertyName = gvList.Columns[colName].DataPropertyName;
            colItemN.HeaderText = gvList.Columns[colName].HeaderText;
            colItemN.Width = gvList.Columns[colName].Width;
            colItemN.SortMode = DataGridViewColumnSortMode.NotSortable;
            gvList.Columns.Insert(gvList.Columns[colName].Index, colItemN);
            gvList.Columns.Remove(colName);
            colItemN.Name = colName;
            */
            // データグリッドに表示するコンボボックスの項目を設定

            // キー項目
            vm.Item_nList = new List<DataExtractComboBoxItem>();
            vm.Item_nList.Add(new DataExtractComboBoxItem("", "0"));
            int cnt = 1;
            foreach (string item in dicTableItemNameValues)
            {
                vm.Item_nList.Add(new DataExtractComboBoxItem(item, $"{cnt:0}"));
                cnt++;
            }

            // 順番
            vm.Order_flgList = new List<DataExtractComboBoxItem>();
            vm.Order_flgList.Add(new DataExtractComboBoxItem("", "0"));
            vm.Order_flgList.Add(new DataExtractComboBoxItem("昇順", "1"));
            vm.Order_flgList.Add(new DataExtractComboBoxItem("降順", "2"));

            // 一覧を生成
            //gvList.Items.Clear();
            FavoriteSortList = new ObservableCollection<DataExtractSortItem>();

            for (int i = 0; i < 10; i++)
            {
                //gvList.Rows.Add();
                //gvList.Rows[i].Cells[0].Value = i + 1;
                DataExtractSortItem strCells = new DataExtractSortItem();
                strCells.ColPriority = $"{i + 1:0}";

                FavoriteSortList.Add(strCells);
            }

            cnt = 0;
            for (int i = 0; i < vm.DtFavoriteSort.Rows.Count; i++)
            {
                DataRow row = vm.DtFavoriteSort.Rows[i];

                if (!row["ORDER_PRIORITY"].ToString().Equals("0"))
                {
                    /*
                    gvList.Rows[cnt].Cells["colPriority"].Value = row["ORDER_PRIORITY"].ToString();
                    gvList.Rows[cnt].Cells["colItem_n"].Value = row["CAPTION"].ToString();
                    DataGridViewComboBoxCell colOrder_flg = (DataGridViewComboBoxCell)gvList.Rows[cnt].Cells["colOrder_flg"];
                    gvList.Rows[cnt].Cells["colOrder_flg"].Value = colOrder_flg.Items[int.Parse(row["ORDER_FLG"].ToString())];
                    */
                    FavoriteSortList[cnt].ColPriority = row["ORDER_PRIORITY"].ToString();
                    FavoriteSortList[cnt].ColItem_n = vm.Item_nList.Find(x => x.Label == row["CAPTION"].ToString()).Value;
                    FavoriteSortList[cnt].ColOrder_flg = vm.Order_flgList[int.Parse(row["ORDER_FLG"].ToString())].Value;

                    cnt++;
                }
            }
            gvList.ItemsSource = FavoriteSortList;
        }

        /// <summary>
        /// Loadedイベント
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            try
            {
                logger.Info("初期表示");

            }
            catch (Exception ex)
            {
                logger.Error(ex);
                MessageBox.Show(ex.Message);
            }
        }

        #region DB処理

        #endregion

        #region ボタン

        /// <summary>
        /// 設定　ボタンクリック
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnSave_Click(object sender, EventArgs e)
        {
            // エラーチェック
            if (!CheckInputData())
            {
                // 入力エラー
                return;
            }

            FavoriteSortViewModel vm = (FavoriteSortViewModel)DataContext;

            // 並べ替え情報をクリア
            for (int i=0; i<vm.DtFavoriteSort.Rows.Count; i++)
            {
                DataRow row = vm.DtFavoriteSort.Rows[i];
                row["ORDER_PRIORITY"] = "0";
                row["ORDER_FLG"] = "0";
            }

            // 設定内容を保存する
            for (int i = 0; i < gvList.Items.Count; i++)
            {
                DataExtractSortItem strCells = (DataExtractSortItem)gvList.Items[i];
                //if (gvList.Rows[i].Cells["colItem_n"].Value == null) break;
                if (strCells.ColItem_n == null) break;

                //String colItem_n = gvList.Rows[i].Cells["colItem_n"].Value.ToString();
                String colItem_n = vm.Item_nList.Find(x => x.Value == strCells.ColItem_n).Label;
                if (!colItem_n.Equals(""))
                {
                    // 設定があるとき

                    // お気に入り並べ替えテーブルの格納位置を求める
                    int cnt = 0;
                    foreach (string item in vm.DicTableItemNameValues)
                    {
                        if (colItem_n.Equals(item))
                        {
                            break;
                        }
                        cnt++;
                    }

                    // お気に入り並べ替えテーブルを更新
                    DataRow row = vm.DtFavoriteSort.Rows[cnt];

                    row["ORDER_PRIORITY"] = i + 1;
                    //DataGridViewComboBoxCell colOrder_flg = (DataGridViewComboBoxCell)gvList.Rows[i].Cells["colOrder_flg"];
                    //row["ORDER_FLG"] = colOrder_flg.Items.IndexOf(colOrder_flg.Value);
                    row["ORDER_FLG"] = strCells.ColOrder_flg;

                }
            }

            this.DialogResult = true;
            this.Close();
        }

        /// <summary>
        /// 入力データチェック
        /// </summary>
        /// <returns></returns>
        private bool CheckInputData()
        {
            bool ret = true;

            try
            {
                gvList.SelectedItems.Clear();

                // 順番選択チェック
                for (int i = 0; i < gvList.Items.Count; i++)
                {
                    var row = gvList.ItemContainerGenerator.ContainerFromIndex(i) as DataGridRow;
                    DataExtractSortItem strCells = (DataExtractSortItem)gvList.Items[i];
                    //if (gvList.Rows[i].Cells["colItem_n"].Value != null)
                    if (strCells.ColItem_n != null && strCells.ColItem_n != "0")
                    {
                        // キー項目の 設定があるとき
                        //if (gvList.Rows[i].Cells["colOrder_flg"].Value == null)
                        if (strCells.ColOrder_flg == null || strCells.ColOrder_flg == "0")
                        {
                            //gvList.Rows[i].Cells["colOrder_flg"].Selected = true;
                            var cellInfo = new DataGridCellInfo(row, gvList.Columns[2]);
                            gvList.CurrentCell = cellInfo;
                            ret = false;
                            break;
                        }
                    }
                }
                if (ret == false)
                {
                    MessageBox.Show("順番を選択してください。",
                        "入力エラー", MessageBoxButton.OK, MessageBoxImage.Exclamation);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("システムエラーが発生しました。\n" + ex.Message,
                    "システムエラー", MessageBoxButton.OK, MessageBoxImage.Error);
                ret = false;
            }

            return ret;
        }

        /// <summary>
        /// 閉じる　ボタンクリック
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnClose_Click(object sender, EventArgs e)
        {
            this.DialogResult = false;
            this.Close();
        }
        #endregion
    }
}
