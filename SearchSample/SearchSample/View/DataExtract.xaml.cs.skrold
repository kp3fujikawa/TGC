using MahApps.Metro.Controls.Dialogs;
using Microsoft.Win32;
using MRILossTool.ViewModel;
using NLog;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Data;
using System.Data.OleDb;
using System.Globalization;
using System.Linq;
using System.Runtime.ExceptionServices;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using static MRILossTool.DataExtractClass;

namespace MRILossTool.View
{
    /// <summary>
    /// DataExtract.xaml の相互作用ロジック
    /// </summary>
    public partial class DataExtract : MahApps.Metro.Controls.MetroWindow
    {
        private static Logger logger = LogManager.GetCurrentClassLogger();

        #region "定数"

        #endregion

        #region "変数"

        /// <summary>
        /// テーブルアイテムが日付データか判定
        /// </summary>
        /// <param name="itemName">テーブルアイテム名</param>
        /// <returns>true/false</returns>
        private bool IsDateItem(string itemName)
            {
            bool ret = false;

            //if (itemName.ToLower().IndexOf("other_data_1") >= 0)  // for debug
            if (itemName.ToLower().IndexOf("date") >= 0)
            {
                ret = true;
            }

            return ret;
        }

        /// <summary>
        /// テーブルアイテムが時刻データか判定
        /// </summary>
        /// <param name="itemName">テーブルアイテム名</param>
        /// <returns>true/false</returns>
        private bool IsTimeItem(string itemName)
        {
            bool ret = false;

            if (itemName.ToLower().IndexOf("hour") >= 0)
            {
                ret = true;
            }
            else if (itemName.ToLower().IndexOf("time") >= 0)
            {
                ret = true;
            }

            return ret;
        }

        #endregion

        #region "DataGrid用ページング"
        /// <summary>
        /// 現在ページ
        /// </summary>
        private int numberOfRecPerPage;

        /// <summary>
        /// ページング用オブジェクト
        /// </summary>
        static Paging PagedTable = new Paging();

        /// <summary>
        /// 検索結果
        /// </summary>
        private IList<DataRow> ResultList { get; set; }
        #endregion

        /// <summary>
        /// DataGrid用検索条件リスト
        /// </summary>
        private ObservableCollection<DataExtractConditionItem> searchConditionList;
        public ObservableCollection<DataExtractConditionItem> SearchConditionList { get => searchConditionList; set => searchConditionList = value; }

        /// <summary>
        /// データ抽出画面
        /// </summary>
        public DataExtract()
        {
            InitializeComponent();

            // WPF版：テーマ設定
            Common.SettingTheme(this);

            // WPF版：DataGrid ColumnHeaderStyle設定
            Common.SettingColumnHeaderStyle(gvResultData);

            // WPF版：DataGrid ページ設定
            PagedTable.PageIndex = 1;

            int[] RecordsToShow = { 10, 20, 30, 50, 100 };

            foreach (int RecordGroup in RecordsToShow)
            {
                NumberOfRecords.Items.Add(RecordGroup);
            }
            NumberOfRecords.SelectedItem = 10;
            numberOfRecPerPage = Convert.ToInt32(NumberOfRecords.SelectedItem);

            // WPF版：全データ用DataGridを設定
            gvAll.IsReadOnly = true;                    // 読取専用
            gvAll.Visibility = Visibility.Hidden;       // 非表示

            // データグリッドに表示するコンボボックスの項目を設定
            DataExtractViewModel vm = (DataExtractViewModel)DataContext;

            // 項目
            vm.Item_nList = new List<DataExtractComboBoxItem>();
            vm.Item_nList.Add(new DataExtractComboBoxItem("", "0"));

            // 条件式
            vm.ConditionalList = new List<DataExtractComboBoxItem>();
            vm.ConditionalList.Add(new DataExtractComboBoxItem("", "0"));
            vm.ConditionalList.Add(new DataExtractComboBoxItem("次の値に等しい", "1"));
            vm.ConditionalList.Add(new DataExtractComboBoxItem("次の値に等しくない", "2"));
            vm.ConditionalList.Add(new DataExtractComboBoxItem("次の値より大きい", "3"));
            vm.ConditionalList.Add(new DataExtractComboBoxItem("次の値より小さい", "4"));
            vm.ConditionalList.Add(new DataExtractComboBoxItem("次の値以上", "5"));
            vm.ConditionalList.Add(new DataExtractComboBoxItem("次の値以下", "6"));
            vm.ConditionalList.Add(new DataExtractComboBoxItem("次の値を含む", "7"));
            vm.ConditionalList.Add(new DataExtractComboBoxItem("次の値から（期間指定用）", "8"));
            vm.ConditionalList.Add(new DataExtractComboBoxItem("次の値まで（期間指定用）", "9"));

            // 論理式
            vm.Logical_expList = new List<DataExtractComboBoxItem>();
            vm.Logical_expList.Add(new DataExtractComboBoxItem("", "0"));
            vm.Logical_expList.Add(new DataExtractComboBoxItem("AND", "1"));
            vm.Logical_expList.Add(new DataExtractComboBoxItem("OR", "2"));
        }

        /// <summary>
        /// Loadedイベント
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            try
            {
                logger.Info("初期表示");

                DataExtractViewModel vm = (DataExtractViewModel)DataContext;

                // お気に入りテーブルを読み込む
                if (!GetFavoriteTable())
                {
                    MessageBox.Show("お気に入りテーブルの読み込みに失敗しました。",
                        "DB取得エラー", MessageBoxButton.OK, MessageBoxImage.Error);
                }
                // お気に入りテーブル情報を読み込む
                if (!GetFavoriteTableItem())
                {
                    MessageBox.Show("お気に入りテーブル情報の読み込みに失敗しました。",
                        "DB取得エラー", MessageBoxButton.OK, MessageBoxImage.Error);
                }

                // 対象テーブルを設定
                cmbTargetTable.Items.Clear();
                foreach (string key in vm.DicTableName.Keys)
                {
                    cmbTargetTable.Items.Add(key);
                }
                cmbTargetTable.SelectedIndex = -1;

                // 表示条件の初期化
                ClearCondition();
            }
            catch (Exception ex)
            {
                logger.Error(ex);
                MessageBox.Show(ex.Message);
            }
        }

        /// <summary>
        /// 表示条件の初期化
        /// </summary>
        private void ClearCondition()
        {
            DataExtractViewModel vm = (DataExtractViewModel)DataContext;

            vm.CreateDtFavoriteCon();

            // 表示条件のデフォルト5行を生成
            searchConditionList = new ObservableCollection<DataExtractConditionItem>();

            for (int i = 0; i < 5; i++)
            {
                //gvCondition.Rows.Add();
                //gvCondition.Rows[i].Cells[0].Value = $"条件 {i + 1:0}";
                DataExtractConditionItem strCells = new DataExtractConditionItem();
                strCells.ColCondition = $"条件 {i + 1:0}";

                searchConditionList.Add(strCells);
            }

            gvCondition.ItemsSource = SearchConditionList;
        }

        #region DB処理

        /// <summary>
        /// お気に入りテーブルの読み込み
        /// </summary>
        /// <returns>true/false</returns>
        private bool GetFavoriteTable()
        {
            bool ret = true;

            try
            {
                DataExtractViewModel vm = (DataExtractViewModel)DataContext;

                // お気に入りテーブルの読み込み
                ret = vm.GetFavoriteTable();
                if (ret == true)
                {

                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("お気に入りテーブルの読み込みに失敗しました。\n" + ex.Message,
                    "DB読み込みエラー", MessageBoxButton.OK, MessageBoxImage.Error);
                ret = false;
            }

            return ret;
        }

        /// <summary>
        /// お気に入り表示条件テーブルの読み込み
        /// </summary>
        /// <returns>true/false</returns>
        private bool GetFavoriteConTable()
        {
            bool ret = true;

            try
            {
                DataExtractViewModel vm = (DataExtractViewModel)DataContext;

                // お気に入り表示条件テーブルの読み込み
                ret = vm.GetFavoriteConTable(cmbTargetTable.Text);
                if (ret == true)
                {

                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("お気に入り表示条件テーブルの読み込みに失敗しました。\n" + ex.Message,
                    "DB読み込みエラー", MessageBoxButton.OK, MessageBoxImage.Error);
                ret = false;
            }

            return ret;
        }

        /// <summary>
        /// お気に入り並べ替えテーブルの読み込み
        /// </summary>
        /// <returns>true/false</returns>
        private bool GetFavoriteSortTable()
        {
            bool ret = true;

            try
            {
                DataExtractViewModel vm = (DataExtractViewModel)DataContext;

                // お気に入り並べ替えテーブルの読み込み
                ret = vm.GetFavoriteSortTable(cmbTargetTable.Text);
                if (ret == true)
                {

                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("お気に入り並べ替えテーブルの読み込みに失敗しました。\n" + ex.Message,
                    "DB読み込みエラー", MessageBoxButton.OK, MessageBoxImage.Error);
                ret = false;
            }

            return ret;
        }

        /// <summary>
        /// お気に入り名の取得
        /// </summary>
        /// <param name="strFavoriteName">お気に入り名</param>
        /// <returns>1:存在する 0:存在しない 2:システムテンプレート</returns>
        private int GetExistFavoriteName(String strFavoriteName)
        {
            int ret = 0;

            try
            {
                DataExtractViewModel vm = (DataExtractViewModel)DataContext;

                // お気に入り名の取得
                ret = vm.GetExistFavoriteName(strFavoriteName);
            }
            catch (Exception ex)
            {
                MessageBox.Show("お気に入りテーブルの読み込みに失敗しました。\n" + ex.Message,
                    "DB読み込みエラー", MessageBoxButton.OK, MessageBoxImage.Error);
                ret = 0;
            }

            return ret;
        }

        /// <summary>
        /// 既存のお気に入りIDの取得
        /// </summary>
        /// <param name="strFavoriteName">お気に入り名</param>
        /// <returns>お気に入りID</returns>
        private String GetExistFavoriteID(String strFavoriteName)
        {
            String favoriteID = "";

            try
            {
                DataExtractViewModel vm = (DataExtractViewModel)DataContext;

                // 既存のお気に入りIDの取得
                favoriteID = vm.GetExistFavoriteID(strFavoriteName);
            }
            catch (Exception ex)
            {
                MessageBox.Show("お気に入りテーブルの読み込みに失敗しました。\n" + ex.Message,
                    "DB読み込みエラー", MessageBoxButton.OK, MessageBoxImage.Error);
                favoriteID = "";
            }

            return favoriteID;
        }

        /// <summary>
        /// 新規お気に入りIDの取得
        /// </summary>
        /// <returns>お気に入りID</returns>
        private String GetNewFavoriteID()
        {
            String newFavoriteID = "";

            try
            {
                DataExtractViewModel vm = (DataExtractViewModel)DataContext;

                // 新規お気に入りIDの取得
                newFavoriteID = vm.GetNewFavoriteID();
            }
            catch (Exception ex)
            {
                MessageBox.Show("お気に入りテーブルの読み込みに失敗しました。\n" + ex.Message,
                    "DB読み込みエラー", MessageBoxButton.OK, MessageBoxImage.Error);
                newFavoriteID = "";
            }

            return newFavoriteID;
        }

        /// <summary>
        /// お気に入り情報の登録
        /// </summary>
        /// <param name="newFavoriteId">お気に入りID</param>
        /// <param name="newFavoriteName">お気に入り名</param>
        /// <param name="existFavoriteName">1:上書き, 0:新規</param>
        /// <returns>true/false</returns>
        private bool RegistFavoriteTable(string newFavoriteId, string newFavoriteName, int existFavoriteName)
        {
            bool ret = true;
            string strMsg = "";

            DataExtractViewModel vm = (DataExtractViewModel)DataContext;

            // 作業用のお気に入りテーブルを作成
            DataTable dtFavWork = vm.DtFavorite.Copy();             // お気に入りテーブル
            DataTable dtFavConWork = vm.DtFavoriteCon.Copy();       // お気に入り表示条件テーブル
            DataTable dtFavSortWork = vm.DtFavoriteSort.Copy();     // お気に入り並べ替えテーブル

            try
            {
                #region "作業用テーブル設定"

                // ユーザIDとお気に入りIDを作業用テーブルに設定する
                DataRow newrow = null;
                if (existFavoriteName == 0)
                {
                    dtFavWork.Rows.Add();
                    newrow = dtFavWork.Rows[dtFavWork.Rows.Count - 1];
                }
                else
                {
                    for (int i = 0; i < dtFavWork.Rows.Count; i++)
                    {
                        DataRow row = dtFavWork.Rows[i];

                        if (row["FAVORITE_ID"].ToString().Equals(newFavoriteId))
                        {
                            newrow = row;
                            break;
                        }
                    }
                }
                newrow["USER_ID"] = vm.LoginUserID();
                newrow["FAVORITE_ID"] = newFavoriteId;
                newrow["FAVORITE_N"] = newFavoriteName;
                newrow["TABLE_N"] = cmbTargetTable.Text;

                for (int i = 0; i < dtFavConWork.Rows.Count; i++)
                {
                    DataRow row = dtFavConWork.Rows[i];

                    row["USER_ID"] = vm.LoginUserID();
                    row["FAVORITE_ID"] = newFavoriteId;
                }
                for (int i = 0; i < dtFavSortWork.Rows.Count; i++)
                {
                    DataRow row = dtFavSortWork.Rows[i];

                    row["USER_ID"] = vm.LoginUserID();
                    row["FAVORITE_ID"] = newFavoriteId;
                }
                #endregion

                // お気に入り情報の登録
                ret = vm.RegistFavoriteTable(
                        newFavoriteId,
                        newFavoriteName,
                        cmbTargetTable.Text,
                        dtFavWork,
                        dtFavConWork,
                        dtFavSortWork,
                        existFavoriteName,
                        ref strMsg
                        );

                if (ret == false)
                {
                    MessageBox.Show("お気に入りの登録に失敗しました。\n" + strMsg,
                        "DB登録エラー", MessageBoxButton.OK, MessageBoxImage.Error);
                }
                else
                {
                    // DataTableを作業用のテーブルで更新
                    vm.DtFavorite = dtFavWork.Copy();               // お気に入りテーブル
                    vm.DtFavoriteCon = dtFavConWork.Copy();         // お気に入り表示条件テーブル
                    vm.DtFavoriteSort = dtFavSortWork.Copy();       // お気に入り並べ替えテーブル
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("お気に入りの登録に失敗しました。\n" + ex.Message,
                    "DB登録エラー", MessageBoxButton.OK, MessageBoxImage.Error);
                ret = false;
            }

            return ret;
        }

        /// <summary>
        /// お気に入りテーブル情報の読み込み
        /// </summary>
        /// <returns>true/false</returns>
        private bool GetFavoriteTableItem()
        {
            bool ret = true;
            string strMsg = "";

            try
            {
                DataExtractViewModel vm = (DataExtractViewModel)DataContext;

                // お気に入りテーブル情報の読み込み
                ret = vm.GetFavoriteTableItem(ref strMsg);
                if (ret == false)
                {
                    MessageBox.Show("お気に入りテーブルの読み込みに失敗しました。\n" + strMsg,
                        "DB読み込みエラー", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("お気に入りテーブルの読み込みに失敗しました。\n" + ex.Message,
                    "DB読み込みエラー", MessageBoxButton.OK, MessageBoxImage.Error);
                ret = false;
            }

            return ret;
        }

        /// <summary>
        /// 対象テーブル情報の読み込み
        /// </summary>
        /// <returns>DataTableのアイテム（列）情報</returns>
        private DataColumnCollection GetTargetColumnInfo()
        {
            DataColumnCollection cols = null;
            string strMsg = "";

            try
            {
                DataExtractViewModel vm = (DataExtractViewModel)DataContext;

                // 対象テーブル情報の読み込み
                cols = vm.GetTargetColumnInfo(
                    cmbTargetTable.Text,
                    ref strMsg);

                if (cols == null)
                {
                    MessageBox.Show("[" + cmbTargetTable.Text + "]の読み込みに失敗しました。\n" + strMsg,
                        "DB読み込みエラー", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("[" + cmbTargetTable.Text + "]の読み込みに失敗しました。\n" + ex.Message,
                    "DB読み込みエラー", MessageBoxButton.OK, MessageBoxImage.Error);
            }

            return cols;
        }

        /// <summary>
        /// ロス変換対象項目の取得
        /// </summary>
        /// <returns>項目名</returns>
        private String GetLossItemName()
        {
            String LossItemName = "";
            string strMsg = "";

            try
            {
                DataExtractViewModel vm = (DataExtractViewModel)DataContext;

                // ロス変換対象項目の取得
                LossItemName = vm.GetLossItemName(
                    cmbTargetTable.Text,
                    ref strMsg
                    );
                if (LossItemName == "")
                {
                    MessageBox.Show("ロス変換テーブルの読み込みに失敗しました。\n" + strMsg,
                        "DB読み込みエラー", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("ロス変換テーブルの読み込みに失敗しました。\n" + ex.Message,
                    "DB読み込みエラー", MessageBoxButton.OK, MessageBoxImage.Error);
                LossItemName = "";
            }

            return LossItemName;
        }

        /// <summary>
        /// 検索処理
        /// </summary>
        /// <returns>true/false</returns>
        private bool GetSearchData()
        {
            bool ret = true;
            string strMsg = "";

            try
            {
                // WPF版：待機カーソルにする
                Mouse.OverrideCursor = Cursors.Wait;

                DataExtractViewModel vm = (DataExtractViewModel)DataContext;

                // テーブル情報を取得
                DataColumnCollection cols = GetTargetColumnInfo();

                // ロス変換対象項目の取得
                String LossItemName = GetLossItemName();

                // 検索処理
                DataTable dt = new DataTable();
                DataTable dtSchema = new DataTable();

                ret = vm.GetSearchData(
                    cmbTargetTable.Text,
                    cols,
                    LossItemName,
                    gvCondition,
                    ref dt,
                    ref dtSchema,
                    ref strMsg
                    );

                if (ret == true)
                {
                    #region "検索結果を設定"

                    // 検索結果をクリア
                    gvResultData.ItemsSource = null;
                    gvResultData.Items.Clear();
                    gvResultData.Columns.Clear();

                    // WPF版：全データ用DataGrid
                    gvAll.ItemsSource = null;
                    gvAll.Items.Clear();
                    gvAll.Columns.Clear();

                    // ロス種別表示
                    bool dispLossType = false;

                    // ヘッダを生成
                    DataRow[] dRowsFavoriteSort = vm.DtFavoriteSort.AsEnumerable()
                        .Where(x => x["DISP_FLG"].Equals("1")).OrderBy(x => x["SORT_NO"]).ToArray();
                    foreach (var row in dRowsFavoriteSort)
                    {
                        // 表示対象のみ設定
                        var column = new DataGridTextColumn();
                        // WPF版：全データ用DataGrid
                        var colAll = new DataGridTextColumn();
                        try
                        {
                            if (row["ITEM_N"].ToString() == Common.ColLossType)
                            {
                                // ロス種別の場合
                                column.Binding = new Binding(Common.ColLossType.ToUpper());
                                column.Header = "ロス種別";
                                // WPF版：全データ用DataGrid
                                colAll.Binding = new Binding(Common.ColLossType.ToUpper());
                                colAll.Header = "ロス種別";

                                dispLossType = true;
                            }
                            else
                            {
                                DataRow rowSchema = dtSchema.Select("COLUMN_NAME='" + row["ITEM_N"].ToString() + "'")[0];
                                //gvResultData.Columns.Add(row["ITEM_N"].ToString(),
                                //    rowSchema["Description"].ToString());
                                column.Binding = new Binding(row["ITEM_N"].ToString().ToUpper());
                                column.Header = rowSchema["Description"].ToString();
                                // WPF版：全データ用DataGrid
                                colAll.Binding = new Binding(row["ITEM_N"].ToString().ToUpper());
                                colAll.Header = rowSchema["Description"].ToString();
                            }

                        }
                        catch
                        {
                            //gvResultData.Columns.Add(row["ITEM_N"].ToString(),
                            //    row["ITEM_N"].ToString());
                            column.Binding = new Binding(row["ITEM_N"].ToString().ToUpper());
                            column.Header = row["ITEM_N"].ToString();
                            // WPF版：全データ用DataGrid
                            colAll.Binding = new Binding(row["ITEM_N"].ToString().ToUpper());
                            colAll.Header = row["ITEM_N"].ToString();
                        }
                        gvResultData.Columns.Add(column);

                        // WPF版：全データ用DataGrid
                        gvAll.Columns.Add(colAll);
                    }

                    // ロス種別
                    //gvResultData.Columns.Add(ColLossType, "ロス種別");
                    //var colLossType = new DataGridTextColumn();
                    //colLossType.Header = "ロス種別";
                    //colLossType.Binding = new Binding(vm.ColLossType);
                    //gvResultData.Columns.Add(colLossType);

                    //// WPF版：全データ用DataGrid
                    //var colLossTypeAll = new DataGridTextColumn();
                    //colLossTypeAll.Header = "ロス種別";
                    //colLossTypeAll.Binding = new Binding(vm.ColLossType);
                    //gvAll.Columns.Add(colLossTypeAll);
                    gvAll.Items.Refresh();

                    // ソートを無効にする
                    for (int i = 0; i < gvResultData.Columns.Count; i++)
                    {
                        gvResultData.Columns[i].SortDirection = null;
                        // WPF版：全データ用DataGrid
                        gvAll.Columns[i].SortDirection = null;
                    }

                    // データを設定
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        DataRow row = dt.Rows[i];

                        /*
                        gvResultData.Rows.Add();

                        for (int j = 0; j < gvResultData.Columns.Count; j++)
                        {
                            gvResultData.Rows[i].Cells[gvResultData.Columns[j].Name].Value = row[gvResultData.Columns[j].Name].ToString();
                        }
                        */
                        if (dispLossType)
                        {
                            // ロス種別
                            string LossKey = row[vm.ColLossType].ToString();
                            if (Common.loss_type_dic.ContainsKey(LossKey))
                            {
                                //gvResultData.Rows[i].Cells[ColLossType].Value = Common.loss_type_dic[LossKey];
                                row[dt.Columns.Count - 1] = Common.loss_type_dic[LossKey];
                            }
                        }
                    }
                    //gvResultData.ItemsSource = dt.DefaultView;

                    // WPF版：DataGrid ページ設定
                    PagedTable.PageIndex = 0;
                    if (dt.Rows.Count > 0)
                    {
                        ResultList = dt.AsEnumerable().ToList<DataRow>();
                        DataTable firstTable = PagedTable.SetPaging(ResultList, numberOfRecPerPage);

                        gvResultData.ItemsSource = firstTable.DefaultView;
                        PageInfo.Content = PageNumberDisplay();
                    }
                    else
                    {
                        ResultList = null;
                        PageInfo.Content = "";
                    }

                    // WPF版：全データ用DataGridを設定
                    gvAll.ItemsSource = dt.DefaultView;

                    #endregion
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("[" + cmbTargetTable.Text + "]の読み込みに失敗しました。\n" + ex.Message,
                    "DB読み込みエラー", MessageBoxButton.OK, MessageBoxImage.Error);
                ret = false;
            }
            finally
            {
                // WPF版：カーソルを元に戻す
                Mouse.OverrideCursor = null;
            }

            return ret;
        }

        #endregion

        #region ボタン

        /// <summary>
        /// 対象テーブル選択
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cmbTargetTable_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (cmbTargetTable.SelectedIndex != -1)
            {
                // WPF版は自動で設定されない為、書き換え
                cmbTargetTable.Text = cmbTargetTable.SelectedValue.ToString();
            }

            DataExtractViewModel vm = (DataExtractViewModel)DataContext;

            // 対象テーブル選択
            vm.SelectTargetTable(cmbTargetTable.Text);

            // 表示条件の初期化
            ClearCondition();

            // 検索結果クリア
            gvResultData.ItemsSource = null;
            gvResultData.Items.Clear();
            gvResultData.Columns.Clear();
        }

        /// <summary>
        /// お気に入り　ボタンクリック
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnSelectFavorite_Click(object sender, EventArgs e)
        {
            DataExtractViewModel vm = (DataExtractViewModel)DataContext;

            FavoriteList frm1 = new FavoriteList();

            if (frm1.ShowDialog() == true)
            {
                FavoriteListViewModel vmFavoriteList = (FavoriteListViewModel)frm1.DataContext;

                // 選択お気に入り名を設定
                vm.SelectedFavoriteID = vmFavoriteList.SelectedFavoriteID;
                txtConditionName.Text = vmFavoriteList.SelectedFavoriteName;
                vm.SelectedUserID = vmFavoriteList.SelectedUserID;

                // 選択情報テーブル名を設定
                cmbTargetTable.Text = vmFavoriteList.SelectedTableName;

                // お気に入り表示条件テーブルを読み込む
                if (!GetFavoriteConTable())
                {
                    MessageBox.Show("お気に入り表示条件テーブルの読み込みに失敗しました。",
                        "DB読み込みエラー", MessageBoxButton.OK, MessageBoxImage.Error);
                }
                // お気に入り並べ替えテーブルを読み込む
                if (!GetFavoriteSortTable())
                {
                    MessageBox.Show("お気に入り並べ替えテーブルの読み込みに失敗しました。",
                        "DB読み込みエラー", MessageBoxButton.OK, MessageBoxImage.Error);
                }
                // お気に入りに対応した表示条件を設定
                searchConditionList = new ObservableCollection<DataExtractConditionItem>();

                for (int i = 0; i < vm.DtFavoriteCon.Rows.Count; i++)
                {
                    //gvCondition.Rows.Add();

                    DataRow row = vm.DtFavoriteCon.Rows[i];

                    // アイテム名を取得
                    string itemName = row["ITEM_N"].ToString();
                    try
                    {
                        row["CAPTION"] = vm.DicTableItemName[cmbTargetTable.Text][itemName];
                    }
                    catch
                    {
                        row["CAPTION"] = itemName;
                    }

                    // 一覧に設定
                    /*
                    gvCondition.Rows[i].Cells["colCondition"].Value = $"条件 {int.Parse(row["CONDITION_NO"].ToString()):0}";
                    gvCondition.Rows[i].Cells["colItem_code"].Value = row["ITEM_N"].ToString();
                    gvCondition.Rows[i].Cells["colItem_n"].Value = row["CAPTION"].ToString();
                    DataGridViewComboBoxCell colConditional = (DataGridViewComboBoxCell)gvCondition.Rows[i].Cells["colConditional"];
                    gvCondition.Rows[i].Cells["colConditional"].Value = colConditional.Items[int.Parse(row["CONDITIONAL"].ToString())];
                    gvCondition.Rows[i].Cells["colCon_value"].Value = row["CON_VALUE"].ToString();
                    DataGridViewComboBoxCell colLogical_exp = (DataGridViewComboBoxCell)gvCondition.Rows[i].Cells["colLogical_exp"];
                    gvCondition.Rows[i].Cells["colLogical_exp"].Value = colLogical_exp.Items[int.Parse(row["LOGICAL_EXP"].ToString())];
                    */
                    DataExtractConditionItem strCells = new DataExtractConditionItem();
                    strCells.ColCondition = $"条件 {int.Parse(row["CONDITION_NO"].ToString()):0}";
                    strCells.ColItem_code = row["ITEM_N"].ToString();
                    strCells.ColItem_n = vm.Item_nList.Find(x => x.Label == row["CAPTION"].ToString()).Value;
                    strCells.ColConditional = vm.ConditionalList[int.Parse(row["CONDITIONAL"].ToString())].Value;
                    strCells.ColCon_value = row["CON_VALUE"].ToString();
                    strCells.ColLogical_exp = vm.Logical_expList[int.Parse(row["LOGICAL_EXP"].ToString())].Value;

                    searchConditionList.Add(strCells);
                }
                gvCondition.ItemsSource = SearchConditionList;

                // 検索結果クリア
                gvResultData.ItemsSource = null;
                gvResultData.Items.Clear();
                gvResultData.Columns.Clear();
            }
        }

        /// <summary>
        /// 検索　ボタンクリック
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        /// <remarks>MarApps 用に非同期(async)に設定</remarks>
        private async void btnSearch_Click(object sender, EventArgs e)
        {
            if (cmbTargetTable.SelectedIndex == -1)
            {
                /*
                MessageBox.Show("対象テーブルを選択してください",
                    "操作エラー", MessageBoxButton.OK, MessageBoxImage.Exclamation);
                */
                await this.ShowMessageAsync("操作エラー", "対象テーブルを選択してください");
                return;
            }
            // 表示条件エラーチェック
            if (!CheckCondition())
            {
                /*
                MessageBox.Show("検索条件に問題があります。確認してください。",
                    "入力エラー", MessageBoxButton.OK, MessageBoxImage.Exclamation);
                */
                await this.ShowMessageAsync("入力エラー", "検索条件に問題があります。確認してください。");
                return;
            }
            // 検索処理
            if (!GetSearchData())
            {
                /*
                MessageBox.Show("検索結果の取得に失敗しました。",
                    "システムエラー", MessageBoxButton.OK, MessageBoxImage.Error);
                */
                await this.ShowMessageAsync("システムエラー", "検索結果の取得に失敗しました。");
                return;
            }
        }

        /// <summary>
        /// 条件追加　ボタンクリック
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnAddCondition_Click(object sender, EventArgs e)
        {
            // 1行追加
            //gvCondition.Rows.Add();
            //int cnt = gvCondition.Rows.Count;
            //gvCondition.Rows[cnt - 1].Cells[0].Value = $"条件 {cnt:0}";
            int cnt = gvCondition.Items.Count;
            DataExtractConditionItem strCells = new DataExtractConditionItem();
            strCells.ColCondition = $"条件 {cnt+1:0}";
            SearchConditionList.Add(strCells);

            // 新規行にカーソルを設定
            gvCondition.SelectedCells.Clear();
            //gvCondition.Rows[cnt - 1].Cells[1].Selected = true;
            //gvCondition.SelectedIndex = gvCondition.Items.Count - 1;
            var row = gvCondition.ItemContainerGenerator.ContainerFromIndex(gvCondition.Items.Count - 1) as DataGridRow;
            var cellInfo = new DataGridCellInfo(row, gvCondition.Columns[1]);
            gvCondition.CurrentCell = cellInfo;
        }

        /// <summary>
        /// 表示項目　ボタンクリック
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        /// <remarks>MarApps 用に非同期(async)に設定</remarks>
        private async void btnCondition_Click(object sender, EventArgs e)
        {
            // 対象テーブルが選択されているかチェック
            if (cmbTargetTable.SelectedIndex == -1)
            {
                /*
                MessageBox.Show("対象テーブルを選択してください",
                    "操作エラー", MessageBoxButton.OK, MessageBoxImage.Exclamation);
                */
                await this.ShowMessageAsync("操作エラー", "対象テーブルを選択してください");
                return;
            }

            DataExtractViewModel vm = (DataExtractViewModel)DataContext;

            FavoriteDispItem frm1 = new FavoriteDispItem(vm.SelectedFavoriteID,
                vm.DicTableName[cmbTargetTable.Text], cmbTargetTable.Text,
                vm.DtFavoriteSort);

            if (frm1.ShowDialog() == true)
            {
                FavoriteDispItemViewModel vmFavoriteDispItem = (FavoriteDispItemViewModel)frm1.DataContext;

                // お気に入り並べ替え情報を設定
                vm.DtFavoriteSort = vmFavoriteDispItem.GetDtFavoriteSort();

                // 検索結果再表示
                if (!GetSearchData())
                {
                    /*
                    MessageBox.Show("検索結果の取得に失敗しました。",
                        "システムエラー", MessageBoxButton.OK, MessageBoxImage.Error);
                    */
                    await this.ShowMessageAsync("システムエラー", "検索結果の取得に失敗しました。");
                    return;
                }
            }
        }

        /// <summary>
        /// 並べ替え　ボタンクリック
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        /// <remarks>MarApps 用に非同期(async)に設定</remarks>
        private async void btnSort_Click(object sender, EventArgs e)
        {
            // 対象テーブルが選択されているかチェック
            if (cmbTargetTable.SelectedIndex == -1)
            {
                /*
                MessageBox.Show("対象テーブルを選択してください",
                    "操作エラー", MessageBoxButton.OK, MessageBoxImage.Exclamation);
                */
                await this.ShowMessageAsync("操作エラー", "対象テーブルを選択してください");
                return;
            }

            DataExtractViewModel vm = (DataExtractViewModel)DataContext;

            FavoriteSort frm1 = new FavoriteSort(vm.SelectedFavoriteID,
                vm.DicTableName[cmbTargetTable.Text], cmbTargetTable.Text,
                vm.DtFavoriteSort,
                vm.DicTableItemName[cmbTargetTable.Text].Values
                );

            if (frm1.ShowDialog() == true)
            {
                FavoriteSortViewModel vmFavoriteSort = (FavoriteSortViewModel)frm1.DataContext;

                // お気に入り並べ替え情報を設定
                vm.DtFavoriteSort = vmFavoriteSort.GetDtFavoriteSort();

                // 検索結果再表示
                if (!GetSearchData())
                {
                    /*
                    MessageBox.Show("検索結果の取得に失敗しました。",
                        "システムエラー", MessageBoxButton.OK, MessageBoxImage.Error);
                    */
                    await this.ShowMessageAsync("システムエラー", "検索結果の取得に失敗しました。");
                    return;
                }
            }
        }

        /// <summary>
        /// ダウンロード　ボタンクリック
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        /// <remarks>MarApps 用に非同期(async)に設定</remarks>
        private async void btnDownload_Click(object sender, EventArgs e)
        {
            if (gvResultData.Items.Count == 0) return;

            // 表示条件エラーチェック
            if (!CheckCondition())
            {
                /*
                MessageBox.Show("検索条件に問題があります。確認してください。",
                    "入力エラー", MessageBoxButton.OK, MessageBoxImage.Exclamation);
                */
                await this.ShowMessageAsync("入力エラー", "検索条件に問題があります。確認してください。");
                return;
            }

            SaveFileDialog saveFileDialog = new SaveFileDialog();

            // 初期ファイル名を指定
            saveFileDialog.FileName = "*.csv";
            // タイトル設定
            saveFileDialog.Title = "保存するファイル名を入力してください";

            // ファイル名の入力ダイアログを表示
            if (saveFileDialog.ShowDialog() == true)
            {
                // CSVファイルに出力
                // gvResultData だと現在のページしか出力されない為、gvAll を指定
                //Common.outputCSV(saveFileDialog.FileName, gvResultData);
                Common.outputCSV(saveFileDialog.FileName, gvAll);

                /*
                MessageBox.Show("出力が終了しました。",
                    "処理終了", MessageBoxButton.OK, MessageBoxImage.Information);
                */
                await this.ShowMessageAsync("処理終了", "出力が終了しました。");
            }
        }

        /// <summary>
        /// お気に入り登録　ボタンクリック
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        /// <remarks>MarApps 用に非同期(async)に設定</remarks>
        private async void btnSaveFavorite_Click(object sender, EventArgs e)
        {
            if (cmbTargetTable.SelectedIndex == -1)
            {
                /*
                MessageBox.Show("対象テーブルを選択してください",
                    "操作エラー", MessageBoxButton.OK, MessageBoxImage.Exclamation);
                */
                await this.ShowMessageAsync("操作エラー", "対象テーブルを選択してください");
                return;
            }
            // 表示条件エラーチェック
            if (!CheckCondition())
            {
                /*
                MessageBox.Show("検索条件に問題があります。確認してください。",
                    "入力エラー", MessageBoxButton.OK, MessageBoxImage.Exclamation);
                */
                await this.ShowMessageAsync("入力エラー", "検索条件に問題があります。確認してください。");
                return;
            }

            // お気に入り名を入力
            String strFavoriteName = "";
            /*
            strFavoriteName = Microsoft.VisualBasic.Interaction.InputBox(
                "保存するお気に入り名を入力してください", "お気に入り登録",
                txtConditionName.Text,
                -1, -1);

            // 入力チェック
            if (strFavoriteName == "")
            {
                return;
            }
            */
            var mdsInput = new MetroDialogSettings()
            {
                AffirmativeButtonText = "OK",
                NegativeButtonText = "キャンセル",
                DefaultText = txtConditionName.Text
            };
            strFavoriteName = await this.ShowInputAsync("お気に入り登録", "保存するお気に入り名を入力してください",
                mdsInput);

            // 入力チェック
            if (strFavoriteName == null || strFavoriteName == "")
            {
                return;
            }
            // 重複チェック
            String newFavoriteID = "";
            int existFavoriteName = GetExistFavoriteName(strFavoriteName);
            if (existFavoriteName != 0)
            {
                // 既存のお気に入り名と同じ場合
                if (existFavoriteName == 2)
                {
                    /*
                    MessageBox.Show("システムテンプレートは変更できません\n名称を変更してください",
                    "入力エラー", MessageBoxButton.OK, MessageBoxImage.Exclamation);
                    */
                    await this.ShowMessageAsync("入力エラー", "システムテンプレートは変更できません\n名称を変更してください");
                    return;
                }
                else
                {
                    /*
                    if (MessageBox.Show("[" + strFavoriteName + "]は既に存在します。上書きしますか？",
                        "確認", MessageBoxButton.OKCancel, MessageBoxImage.Question)
                        != MessageBoxResult.OK)
                    {
                        return;
                    }
                    */
                    var mdsOutput = new MetroDialogSettings()
                    {
                        AffirmativeButtonText = "OK",
                        NegativeButtonText = "キャンセル",
                    };
                    if (await this.ShowMessageAsync("確認",
                        "[" + strFavoriteName + "]は既に存在します。上書きしますか？",
                        MessageDialogStyle.AffirmativeAndNegative, mdsOutput)
                        != MessageDialogResult.Affirmative)
                    {
                        return;
                    }
                    // 現在のお気に入りIDの取得
                    newFavoriteID = GetExistFavoriteID(strFavoriteName);
                }
            }
            else
            {
                // 新規お気に入りIDの取得
                newFavoriteID = GetNewFavoriteID();
            }
            if (newFavoriteID == "")
            {
                /*
                MessageBox.Show("お気に入りのIDの取得に失敗しました",
                    "登録エラー", MessageBoxButton.OK, MessageBoxImage.Error);
                */
                await this.ShowMessageAsync("登録エラー", "お気に入りのIDの取得に失敗しました");
                return;
            }
            // 保存処理
            if (!RegistFavoriteTable(newFavoriteID, strFavoriteName, existFavoriteName))
            {
                return;
            }

            DataExtractViewModel vm = (DataExtractViewModel)DataContext;

            // お気に入り情報を更新する
            vm.SelectedFavoriteID = newFavoriteID;
            txtConditionName.Text = strFavoriteName;
            vm.SelectedUserID = vm.LoginUserID();
        }

        /// <summary>
        /// 閉じる　ボタンクリック
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnClose_Click(object sender, EventArgs e)
        {
            this.Close();
        }
        #endregion

        #region "エラーチェック処理"

        /// <summary>
        /// 表示条件エラーチェック
        /// </summary>
        /// <returns>true/false</returns>
        private bool CheckCondition()
        {
            bool ret = true;

            try
            {
                DataExtractViewModel vm = (DataExtractViewModel)DataContext;

                // テーブル情報を取得
                DataColumnCollection cols = GetTargetColumnInfo();

                // 表示条件のチェック
                for (int i = 0; i < SearchConditionList.Count; i++)
                {
                    var row = gvCondition.ItemContainerGenerator.ContainerFromIndex(i) as DataGridRow;
                    var cond = SearchConditionList[i];

                    // 項目
                    var colItem_n = cond.ColItem_n;
                    if (string.IsNullOrEmpty(colItem_n))
                    {
                        continue;
                    }

                    // 条件式
                    var colConditional = cond.ColCondition;
                    if (string.IsNullOrEmpty(colConditional))
                    {
                        //row.Cells["colConditional"].Selected = true;
                        var cellInfo = new DataGridCellInfo(row, gvCondition.Columns[2]);
                        gvCondition.CurrentCell = cellInfo;
                        return false;
                    }

                    #region "値"

                    // 値
                    var colCon_value = cond.ColCon_value;
                    if (string.IsNullOrEmpty(colCon_value))
                    {
                        //row.Cells["colCon_value"].Selected = true;
                        var cellInfo = new DataGridCellInfo(row, gvCondition.Columns[3]);
                        gvCondition.CurrentCell = cellInfo;
                        return false;
                    }
                    else
                    {
                        // アイテム名に対応したコードを取得
                        string itemName = vm.Item_nList.Find(x => x.Value == cond.ColItem_n).Label;
                        var pair = vm.DicTableItemName[cmbTargetTable.Text].FirstOrDefault(c => c.Value == itemName);
                        string itemCode = pair.Key;

                        // データタイプを取得
                        Type typeItem = cols[itemCode].DataType;

                        // カンマ（,）区切りで複数入力可
                        string[] inpValues = colCon_value.Split(',');
                        foreach (string inpVal in inpValues)
                        {
                            if (typeItem == typeof(System.Double))
                            {
                                // 数値の場合 ： 入力された「値」が数値であること
                                try
                                {
                                    int intval = int.Parse(inpVal);
                                }
                                catch
                                {
                                    //row.Cells["colCon_value"].Selected = true;
                                    var cellInfo = new DataGridCellInfo(row, gvCondition.Columns[3]);
                                    gvCondition.CurrentCell = cellInfo;
                                    return false;
                                }
                            }
                            else if (typeItem == typeof(String))
                            {
                                if (IsDateItem(itemCode))
                                {
                                    // 日付の場合 ： 実在する日付であること
                                    string[] formats = { "yyyy/MM/dd", "yyyy/M/dd", "yyyy/M/d", "yy/MM/dd", "yy/M/dd", "yy/M/d" };
                                    CultureInfo ci = CultureInfo.CurrentCulture;
                                    DateTimeStyles dts = DateTimeStyles.None;
                                    DateTime dateValue;

                                    if (!DateTime.TryParseExact(inpVal, formats, ci, dts, out dateValue))
                                    {
                                        //row.Cells["colCon_value"].Selected = true;
                                        var cellInfo = new DataGridCellInfo(row, gvCondition.Columns[3]);
                                        gvCondition.CurrentCell = cellInfo;
                                        return false;
                                    }
                                }
                                else if (IsTimeItem(itemCode))
                                {
                                    // 時間の場合 ： 実在する時間であること
                                    string[] formats = { "HH", "HH:mm", "H:mm", "H:m", "HH:mm:ss", "H:mm:ss", "H:m:ss", "H:m:s" };
                                    CultureInfo ci = CultureInfo.CurrentCulture;
                                    DateTimeStyles dts = DateTimeStyles.None;
                                    DateTime dateValue;

                                    if (!DateTime.TryParseExact(inpVal, formats, ci, dts, out dateValue))
                                    {
                                        //row.Cells["colCon_value"].Selected = true;
                                        var cellInfo = new DataGridCellInfo(row, gvCondition.Columns[3]);
                                        gvCondition.CurrentCell = cellInfo;
                                        return false;
                                    }
                                }
                            }
                        }
                    }
                    #endregion

                    // 論理式
                    var colLogical_exp = cond.ColLogical_exp;
                    if (string.IsNullOrEmpty(colLogical_exp))
                    {
                        // 次の行に設定がある場合はエラー
                        if (i < SearchConditionList.Count - 1)
                        {
                            var nextColItem_n = SearchConditionList[i + 1].ColItem_n;
                            if (!string.IsNullOrEmpty(nextColItem_n))
                            {
                                //row.Cells["colLogical_exp"].Selected = true;
                                var cellInfo = new DataGridCellInfo(row, gvCondition.Columns[4]);
                                gvCondition.CurrentCell = cellInfo;
                                return false;
                            }
                        }
                    }
                }
                // お気に入り表示条件テーブルに設定
                vm.SetFavoriteCon(
                    cmbTargetTable.Text,
                    gvCondition
                    );
            }
            catch (Exception ex)
            {
                MessageBox.Show("システムエラーが発生しました\n" + ex.Message,
                    "システムエラー", MessageBoxButton.OK, MessageBoxImage.Error);
                ret = false;
            }

            return ret;
        }
        #endregion

        /// <summary>
        /// BeginningEditイベント
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void gvCondition_BeginningEdit(object sender, DataGridBeginningEditEventArgs e)
        {
            // 編集するとエラーになる為、無効にする
            e.Cancel = true;
        }

        /// <summary>
        /// CurrentCellChangedイベント
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void gvCondition_CurrentCellChanged(object sender, EventArgs e)
        {
            var cell = DataGridHelper.GetCell((DataGridCellInfo)gvCondition.CurrentCell);
            if (cell == null) return;

            if (cell.Column.Header.ToString() == "値")
            {
                // DataGridを編集モードにする
                cell.Focus();
                gvCondition.BeginEdit();
            }
        }

        /// <summary>
        /// 対象テーブル選択 DropDownClosed イベント
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cmbTargetTable_DropDownClosed(object sender, EventArgs e)
        {
            DataExtractViewModel vm = (DataExtractViewModel)DataContext;

            // 対象テーブルを手動で変更時は選択お気に入り名を初期化
            vm.SelectedFavoriteID = "";
            vm.SelectedUserID = "";
            txtConditionName.Text = "";
        }
        #region "DataGrid用ページング用イベント"
        /// <summary>
        /// ページ番号表示
        /// </summary>
        /// <returns></returns>
        public string PageNumberDisplay()
        {
            int PagedNumber = numberOfRecPerPage * (PagedTable.PageIndex + 1);
            if (PagedNumber > ResultList.Count)
            {
                PagedNumber = ResultList.Count;
            }
            return PagedNumber + " / " + ResultList.Count;
            //This dramatically reduced the number of times I had to write this string statement
        }
        /// <summary>
        /// [<<]　ボタンクリック
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void FirstButton_Click(object sender, RoutedEventArgs e)
        {
            if (ResultList == null) return;

            gvResultData.ItemsSource = PagedTable.First(ResultList, numberOfRecPerPage).DefaultView;
            PageInfo.Content = PageNumberDisplay();
        }

        /// <summary>
        /// [<]　ボタンクリック
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void PreviousButton_Click(object sender, RoutedEventArgs e)
        {
            if (ResultList == null) return;

            gvResultData.ItemsSource = PagedTable.Previous(ResultList, numberOfRecPerPage).DefaultView;
            PageInfo.Content = PageNumberDisplay();
        }

        /// <summary>
        /// ページ　SelectionChanged イベント
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void NumberOfRecords_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (ResultList == null) return;

            numberOfRecPerPage = Convert.ToInt32(NumberOfRecords.SelectedItem);
            gvResultData.ItemsSource = PagedTable.First(ResultList, numberOfRecPerPage).DefaultView;
            PageInfo.Content = PageNumberDisplay();
        }

        /// <summary>
        /// [>]　ボタンクリック
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void NextButton_Click(object sender, RoutedEventArgs e)
        {
            if (ResultList == null) return;

            gvResultData.ItemsSource = PagedTable.Next(ResultList, numberOfRecPerPage).DefaultView;
            PageInfo.Content = PageNumberDisplay();
        }

        /// <summary>
        /// [>>]　ボタンクリック
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void LastButton_Click(object sender, RoutedEventArgs e)
        {
            if (ResultList == null) return;

            gvResultData.ItemsSource = PagedTable.Last(ResultList, numberOfRecPerPage).DefaultView;
            PageInfo.Content = PageNumberDisplay();
        }
        #endregion
    }
}
