using Microsoft.Win32;
using MRILossTool.ViewModel;
using NLog;
using System;
using System.Collections.Generic;
using System.Data;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;

namespace MRILossTool.View
{
    /// <summary>
    /// CommonMaster.xaml の相互作用ロジック
    /// </summary>
    public partial class CommonMaster : MahApps.Metro.Controls.MetroWindow
    {
        private static Logger logger = LogManager.GetCurrentClassLogger();

        #region "定数"

        #endregion

        #region "変数"

        #endregion

        /// <summary>
        /// 共通化定義マスタメンテナンス
        /// </summary>
        public CommonMaster()
        {
            InitializeComponent();

            // WPF版：テーマ設定
            Common.SettingTheme(this);

            // WPF版：DataGrid ColumnHeaderStyle設定
            Common.SettingColumnHeaderStyle(gvCommon);
        }

        /// <summary>
        /// Loadedイベント
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            try
            {
                logger.Info("初期表示");

                CommonMasterViewModel vm = (CommonMasterViewModel)DataContext;

                // 会社マスタの読み込み
                cmbCustomer.Items.Clear();
                cmbCustomer.ItemsSource = vm.CustomerDT;
                cmbCustomer.SelectedValuePath = "CUST_CD";
                cmbCustomer.DisplayMemberPath = "CUST_N";

                // 工場マスタの読み込み
                DataView view1 = new DataView(vm.FactoryDT);
                view1.RowFilter = "CUST_CD = ''";
                cmbFactory.Items.Clear();
                cmbFactory.ItemsSource = view1;
                cmbFactory.SelectedValuePath = "KOJOCD";
                cmbFactory.DisplayMemberPath = "KOJO_N";

                DataView view2 = new DataView(vm.TargetTableDT);
                view2.RowFilter = "CUST_CD = '' and KOJOCD = ''";
                cmbTargetTable.Items.Clear();
                cmbTargetTable.ItemsSource = view2;
                cmbTargetTable.SelectedValuePath = "TABLE_N";
                cmbTargetTable.DisplayMemberPath = "TABLE_NAME";

                // グリッド初期設定
                gvCommon.IsReadOnly = true;             // 読取専用
                gvCommon.CanUserDeleteRows = false;     // 行削除禁止
                gvCommon.CanUserAddRows = false;        // 行挿入禁止
                gvCommon.HeadersVisibility = DataGridHeadersVisibility.Column;   // 先頭列非表示
                gvCommon.AutoGenerateColumns = false;   // 列の自動追加禁止
                //gvCommon.EnableHeadersVisualStyles = false;

                foreach (string col in vm.ColumnName)
                {
                    DataGridTextColumn textColumn = new DataGridTextColumn();
                    textColumn.Binding = new Binding(col);
                    gvCommon.Columns.Add(textColumn);
                }
                for (int i = 0; i < vm.HeaderName.Length; i++)
                {
                    gvCommon.Columns[i].Header = vm.HeaderName[i];
                    gvCommon.Columns[i].Width = 120;
                }
            }
            catch (Exception ex)
            {
                logger.Error(ex);
                MessageBox.Show(ex.Message);
            }
        }

        /// <summary>
        /// マスタデータ（MDB）の読み込み
        /// </summary>
        private void GetMasterData()
        {
            try
            {
                CommonMasterViewModel vm = (CommonMasterViewModel)DataContext;

                vm.GetMasterData(
                    cmbCustomer.SelectedValue.ToString(),
                    cmbFactory.SelectedValue.ToString(),
                    cmbTargetTable.SelectedValue.ToString()
                );

                // 取込定義マスタをロードする
                gvCommon.ItemsSource = vm.DtMst;
            }
            catch (Exception ex)
            {
                MessageBox.Show("マスタデータの読み込みに失敗しました。\n" + ex.Message,
                    "DB読み込みエラー", MessageBoxButton.OK, MessageBoxImage.Error);
            }
            finally
            {

            }
        }

        /// <summary>
        /// ダウンロード　ボタンクリック
        /// </summary>
        private void btnDownload_Click(object sender, EventArgs e)
        {
            // 入力チェック
            if (!CheckInput())
            {
                return;
            }

            SaveFileDialog sfd = new SaveFileDialog();

            // 初期ファイル名を指定
            sfd.FileName = "共通化定義マスタ.csv";
            //タイトル設定
            sfd.Title = "保存先のファイルを選択してください";

            //ダイアログ表示
            if (sfd.ShowDialog() == true)
            {
                // マスタデータCSV出力
                Common.outputCSV(sfd.FileName, gvCommon);
            }

        }

        /// <summary>
        /// アップロード　ボタンクリック
        /// </summary>
        private void btnUpload_Click(object sender, EventArgs e)
        {
            // 入力チェック
            if (!CheckInput())
            {
                return;
            }

            doUpload();
        }

        /// <summary>
        /// アップロード実行
        /// </summary>
        private void doUpload()
        {
            try
            {
                CommonMasterViewModel vm = (CommonMasterViewModel)DataContext;

                String filenName;
                OpenFileDialog ofd = new OpenFileDialog();

                ofd.Title = "ファイル選択";                   // ダイアログのタイトル
                ofd.Filter = "CSV ファイル (*.csv)|*.csv";    // CSVファイルでフィルタ

                // ダイアログ オープン
                if (ofd.ShowDialog() == true)
                {
                    filenName = ofd.FileName;

                    // エラー情報
                    List<string> erro_list = new List<string>();
                    string strMsg = "";
                    int ret = 0;

                    // CSVファイルをロード
                    ret = vm.ReadCSVFile(
                        filenName,
                        cmbCustomer.SelectedValue.ToString(),
                        cmbFactory.SelectedValue.ToString(),
                        cmbTargetTable.SelectedValue.ToString(),
                        ref erro_list,
                        ref strMsg
                    );

                    if (ret == -1)
                    {
                        MessageBox.Show("CSVファイルの場合はShift-JISまたはUTF-8を指定して下さい。",
                            "文字コードエラー", MessageBoxButton.OK, MessageBoxImage.Error);
                        return;
                    }
                    else if (ret == -2)
                    {
                        MessageBox.Show("CSVファイル読み込みエラー\n" + strMsg);
                        return;
                    }
                    else if (ret == -3)
                    { 
                        MessageBox.Show("マスタデータアップロードに失敗しました。\n" + strMsg);
                        return;
                    }
                    else
                    {
                        if (erro_list.Count > 0)
                        {
                            ErrorDialog frm = new ErrorDialog();
                            frm.Message = erro_list;
                            frm.ShowDialog();
                        }
                        else
                        {
                            // 検索
                            GetMasterData();

                            MessageBox.Show(ret.ToString() + "件追加しました。");
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            finally
            {
            }
        }


        /// <summary>
        /// 閉じる　ボタンクリック
        /// </summary>
        private void btnClose_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        /// <summary>
        /// 検索　ボタンクリック
        /// </summary>
        private void btnSearch_Click(object sender, EventArgs e)
        {
            // 入力チェック
            if (!CheckInput())
            {
                return;
            }

            // 検索
            GetMasterData();
        }

        /// <summary>
        /// 会社名コンボボックス選択
        /// </summary>
        private void cmbCustomer_SelectionChanged(object sender, EventArgs e)
        {
            // 工場コンボボックス更新
            DataView viewFactory = cmbFactory.ItemsSource as DataView;
            String cust_cd = cmbCustomer.SelectedValue.ToString();
            if (viewFactory != null && cust_cd != null)
            {
                viewFactory.RowFilter = String.Format("CUST_CD = '{0}'", cust_cd);
            }
            else
            {
                viewFactory.RowFilter = "CUST_CD = ''";
            }
            cmbFactory.SelectedValue = string.Empty;

            // 対象テーブルコンボボックス更新
            DataView viewTargetTable = cmbTargetTable.ItemsSource as DataView;
            viewTargetTable.RowFilter = "CUST_CD = '' and KOJOCD = ''";

        }

        /// <summary>
        /// 工場名コンボボックス選択
        /// </summary>
        private void cmbFactory_SelectionChanged(object sender, EventArgs e)
        {
            // 対象テーブルコンボボックス更新
            DataView viewTargetTable = cmbTargetTable.ItemsSource as DataView;
            String cust_cd = cmbCustomer.SelectedValue.ToString();
            String kojocd = cmbFactory.SelectedValue.ToString();
            if (viewTargetTable != null && kojocd != null)
            {
                viewTargetTable.RowFilter = String.Format("CUST_CD = '{0}' and KOJOCD = '{1}'", cust_cd, kojocd);
            }
            else
            {
                viewTargetTable.RowFilter = "CUST_CD = '' and KOJOCD = ''";
            }
            cmbTargetTable.SelectedValue = string.Empty;

        }

        /// <summary>
        /// 入力チェック
        /// </summary>
        /// <returns></returns>
        private bool CheckInput(bool CheckFormatType = true)
        {
            if (cmbCustomer.SelectedValue == null || string.IsNullOrEmpty(cmbCustomer.SelectedValue.ToString()))
            {
                MessageBox.Show("会社が選択されていません", "検索条件必須エラー", MessageBoxButton.OK, MessageBoxImage.Error);
                return false;
            }
            if (cmbFactory.SelectedValue == null || string.IsNullOrEmpty(cmbFactory.SelectedValue.ToString()))
            {
                MessageBox.Show("工場が選択されていません", "検索条件必須エラー", MessageBoxButton.OK, MessageBoxImage.Error);
                return false;
            }
            if (cmbTargetTable.SelectedValue == null || string.IsNullOrEmpty(cmbTargetTable.SelectedValue.ToString()))
            {
                MessageBox.Show("対象テーブルが選択されていません", "検索条件必須エラー", MessageBoxButton.OK, MessageBoxImage.Error);
                return false;
            }

            return true;
        }
    }
}
