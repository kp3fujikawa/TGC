using MRILossTool.Model;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Controls;
using static MRILossTool.DataExtractClass;

namespace MRILossTool.ViewModel
{
    /// <summary>
    /// データ抽出画面 ViewModel
    /// </summary>
    class DataExtractViewModel
    {
        #region "DBアクセスモデル"

        private FavoriteTableAccess acFavoriteTable = new FavoriteTableAccess();
        private TargetTableAccess acTargetTable = new TargetTableAccess();
        private LossMasterAccess acLossMaster = new LossMasterAccess();

        #endregion

        #region "定数"

        /// <summary>
        /// システムユーザID
        /// </summary>
        private string SystemUserId = "system";

        /// <summary>
        /// 情報テーブル名
        /// </summary>
        private static Dictionary<string, string> dicTableName =
            new Dictionary<string, string>()
            {
                {"稼働テーブル", "i_work"},
                {"人テーブル", "i_man"}
            };
        public Dictionary<string, string> DicTableName { get => dicTableName; set => dicTableName = value; }

        /// <summary>
        /// ロス変換情報テーブル名
        /// </summary>
        private static Dictionary<string, string> dicLossTableKey =
            new Dictionary<string, string>()
            {
                {"稼働テーブル", "t_work_org"},
                {"人テーブル", "t_man_org"}
            };
        public Dictionary<string, string> DicLossTableKey { get => dicLossTableKey; set => dicLossTableKey = value; }

        /// <summary>
        /// 情報テーブルアイテム名
        /// </summary>
        private static Dictionary<string, Dictionary<string, string>> dicTableItemName =
            new Dictionary<string, Dictionary<string, string>>()
            {
                {"稼働テーブル", new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase)
                    {
                        { "company_code", "会社コード" },
                        { "company_name", "会社名" },
                        { "other_data_10", "項目_10" }
                    }
                },
                {"人テーブル", new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase)
                    {
                        { "company_code", "会社コード" },
                        { "company_name", "会社名" },
                        { "other_data_10", "項目_10" }
                    }
                }
            };
        public Dictionary<string, Dictionary<string, string>> DicTableItemName { get => dicTableItemName; set => dicTableItemName = value; }

        /// <summary>
        /// 条件式
        /// </summary>
        private static Dictionary<string, string> dicConditional =
            new Dictionary<string, string>()
            {
                {"次の値に等しい", "="},
                {"次の値に等しくない", "<>"},
                {"次の値より大きい", ">" },
                {"次の値より小さい", "<" },
                {"次の値以上", ">=" },
                {"次の値以下", "<=" },
                {"次の値を含む", "LIKE"},
                {"次の値から（期間指定用）", ">=" },    // BETWEEN
                {"次の値まで（期間指定用）", "<=" }     // AND
            };
        public Dictionary<string, string> DicConditional { get => dicConditional; set => dicConditional = value; }

        /// <summary>
        /// ロス変換テーブル名
        /// </summary>
        private string LossTableName = "S_LOSS";

        /// <summary>
        /// ロス種別アイテム名
        /// </summary>
        private string colLossType = "LOSS_TYPE";
        public string ColLossType { get => colLossType; set => colLossType = value; }

        #endregion

        #region "変数"
        /// <summary>
        /// ログインユーザID
        /// </summary>
        private String loginUserId = "user1";
        public String LoginUserID()
        {
            return loginUserId;
        }

        /// <summary>
        /// お気に入りテーブル
        /// </summary>
        private DataTable dtFavorite = new DataTable();
        public DataTable DtFavorite { get => dtFavorite; set => dtFavorite = value; }

        public void CreateDtFavorite()
        {
            dtFavorite = new DataTable();
            dtFavorite.Columns.Add("USER_ID", typeof(String));
            dtFavorite.Columns.Add("FAVORITE_ID", typeof(String));
            dtFavorite.Columns.Add("FAVORITE_N", typeof(String));
            dtFavorite.Columns.Add("TABLE_N", typeof(String));
        }

        /// <summary>
        /// お気に入り表示条件テーブル
        /// </summary>
        private DataTable dtFavoriteCon = new DataTable();
        public DataTable DtFavoriteCon { get => dtFavoriteCon; set => dtFavoriteCon = value; }

        public void CreateDtFavoriteCon()
        {
            dtFavoriteCon = new DataTable();
            dtFavoriteCon.Columns.Add("USER_ID", typeof(String));
            dtFavoriteCon.Columns.Add("FAVORITE_ID", typeof(String));
            dtFavoriteCon.Columns.Add("CONDITION_NO", typeof(int));
            dtFavoriteCon.Columns.Add("ITEM_N", typeof(String));
            dtFavoriteCon.Columns.Add("CAPTION", typeof(String));
            dtFavoriteCon.Columns.Add("CONDITIONAL", typeof(String));
            dtFavoriteCon.Columns.Add("CON_VALUE", typeof(String));
            dtFavoriteCon.Columns.Add("LOGICAL_EXP", typeof(String));
        }

        /// <summary>
        /// お気に入り並べ替えテーブル
        /// </summary>
        private DataTable dtFavoriteSort = new DataTable();
        public DataTable DtFavoriteSort { get => dtFavoriteSort; set => dtFavoriteSort = value; }

        public void CreateDtFavoriteSort(
            string strTargetTable,
            ref List<DataExtractComboBoxItem> Item_nList
            )
        {
            // テーブルの項目コンボボックスを作成
            /*
            DataGridComboBoxColumn colItemN = new DataGridComboBoxColumn();
            colItemN.Items.Add("");
            foreach (string item in dicTableItemName[cmbTargetTable.Text].Values)
            {
                colItemN.Items.Add(item);
            }
            string colName = "colitem_n";
            colItemN.DataPropertyName = gvCondition.Columns[colName].DataPropertyName;
            colItemN.Header = gvCondition.Columns[colName].HeaderText;
            colItemN.Width = gvCondition.Columns[colName].Width;
            colItemN.SortDirection = null;
            gvCondition.Columns.Insert(gvCondition.Columns[colName].Index, colItemN);
            gvCondition.Columns.Remove(colName);
            colItemN.Name = colName;
            */
            Item_nList = new List<DataExtractComboBoxItem>();
            Item_nList.Add(new DataExtractComboBoxItem("", "0"));
            int cnt = 1;
            foreach (string item in dicTableItemName[strTargetTable].Values)
            {
                Item_nList.Add(new DataExtractComboBoxItem(item, $"{cnt:0}"));
                cnt++;
            }

            // DataTable列を生成
            dtFavoriteSort = new DataTable();
            dtFavoriteSort.Columns.Add("USER_ID", typeof(String));
            dtFavoriteSort.Columns.Add("FAVORITE_ID", typeof(String));
            dtFavoriteSort.Columns.Add("ITEM_NO", typeof(int));
            dtFavoriteSort.Columns.Add("ITEM_N", typeof(String));
            dtFavoriteSort.Columns.Add("CAPTION", typeof(String));
            dtFavoriteSort.Columns.Add("DISP_FLG", typeof(String));
            dtFavoriteSort.Columns.Add("ORDER_PRIORITY", typeof(int));
            dtFavoriteSort.Columns.Add("ORDER_FLG", typeof(String));
            dtFavoriteSort.Columns.Add("SORT_NO", typeof(int));
        }

        /// <summary>
        /// 選択お気に入りID
        /// </summary>
        private String prvSelectedFavoriteID = "";
        public string SelectedFavoriteID { get => prvSelectedFavoriteID; set => prvSelectedFavoriteID = value; }

        /// <summary>
        /// 選択お気に入りIDのユーザID
        /// </summary>
        private String prvSelectedUserID = "";
        public string SelectedUserID { get => prvSelectedUserID; set => prvSelectedUserID = value; }

        #endregion

        #region "DataGrid用コンボボックスリスト"

        /// <summary>
        /// 項目
        /// </summary>
        private List<DataExtractComboBoxItem> item_nList;
        public List<DataExtractComboBoxItem> Item_nList { get => item_nList; set => item_nList = value; }

        /// <summary>
        /// 条件式
        /// </summary>
        private List<DataExtractComboBoxItem> conditionalList;
        public List<DataExtractComboBoxItem> ConditionalList { get => conditionalList; set => conditionalList = value; }

        /// <summary>
        /// 論理式
        /// </summary>
        private List<DataExtractComboBoxItem> logical_expList;
        public List<DataExtractComboBoxItem> Logical_expList { get => logical_expList; set => logical_expList = value; }

        #endregion

        /// <summary>
        /// コンストラクタ
        /// </summary>
        public DataExtractViewModel()
        {
            try
            {
                // お気に入りテーブルを読み込む
                prvSelectedFavoriteID = "";
                prvSelectedUserID = "";
                if (!GetFavoriteTable())
                {
                    return;
                }
                // お気に入りテーブル情報を読み込む
                string strMsg = "";
                if (!GetFavoriteTableItem(ref strMsg))
                {
                    return;
                }
            }
            catch (Exception ex)
            {
                return;
            }
        }

        /// <summary>
        /// お気に入りテーブルの読み込み
        /// </summary>
        /// <returns>true/false</returns>
        public bool GetFavoriteTable()
        {
            bool ret = true;

            CreateDtFavorite();

            try
            {
                // お気に入りテーブルの読み込み
                if (!acFavoriteTable.GetFavoriteTable(loginUserId, ref dtFavorite))
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                ret = false;
            }
            finally
            {

            }

            return ret;
        }

        /// <summary>
        /// お気に入り表示条件テーブルの読み込み
        /// </summary>
        /// <param name="strTargetTable">対象テーブル名</param>
        /// <returns>true/false</returns>
        public bool GetFavoriteConTable(
            string strTargetTable
            )
        {
            bool ret = true;

            CreateDtFavoriteCon();

            try
            {
                // お気に入り表示条件テーブルの読み込み
                if (!acFavoriteTable.GetFavoriteConTable(
                    prvSelectedFavoriteID,
                    dicTableItemName[strTargetTable],
                    ref dtFavoriteCon
                    ))
                {
                    return false;
                }
                // 項目の表示用文字列を設定する
                foreach (DataRow row in dtFavoriteCon.Rows)
                {
                    // アイテム名を取得
                    string itemName = row["ITEM_N"].ToString();
                    try
                    {
                        row["CAPTION"] = dicTableItemName[strTargetTable][itemName];
                    }
                    catch
                    {
                        row["CAPTION"] = itemName;
                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return ret;
        }

        /// <summary>
        /// お気に入り並べ替えテーブルの読み込み
        /// </summary>
        /// <param name="strTargetTable">対象テーブル名</param>
        /// <returns>true/false</returns>
        public bool GetFavoriteSortTable(
            string strTargetTable
            )
        {
            bool ret = true;

            CreateDtFavoriteSort(strTargetTable, ref item_nList);

            try
            {
                // お気に入り並べ替えテーブルの読み込み
                if (!acFavoriteTable.GetFavoriteSortTable(
                    prvSelectedFavoriteID,
                    dicTableItemName[strTargetTable],
                    ref dtFavoriteSort
                    ))
                {
                    return false;
                }
                // 項目の表示用文字列を設定する
                foreach (DataRow row in dtFavoriteSort.Rows)
                {
                    // アイテム名を取得
                    string itemName = row["ITEM_N"].ToString();
                    try
                    {
                        row["CAPTION"] = dicTableItemName[strTargetTable][itemName];
                    }
                    catch
                    {
                        row["CAPTION"] = itemName;
                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return ret;
        }

        /// <summary>
        /// お気に入り名の取得
        /// </summary>
        /// <param name="strFavoriteName">お気に入り名</param>
        /// <returns>1:存在する 0:存在しない 2:システムテンプレート</returns>
        public int GetExistFavoriteName(
            String strFavoriteName
            )
        {
            int ret = 0;

            try
            {
                // お気に入り名の取得
                ret = acFavoriteTable.GetExistFavoriteName(
                    strFavoriteName,
                    SystemUserId);
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return ret;
        }

        /// <summary>
        /// 既存のお気に入りIDの取得
        /// </summary>
        /// <param name="strFavoriteName">お気に入り名</param>
        /// <returns>お気に入りID</returns>
        public String GetExistFavoriteID(
            String strFavoriteName
            )
        {
            String favoriteID = "";

            try
            {
                // 既存のお気に入りIDの取得
                favoriteID = acFavoriteTable.GetExistFavoriteID(strFavoriteName);
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return favoriteID;
        }

        /// <summary>
        /// 新規お気に入りIDの取得
        /// </summary>
        /// <returns>お気に入りID</returns>
        public String GetNewFavoriteID()
        {
            String newFavoriteID = "";

            try
            {
                // 新規お気に入りIDの取得
                newFavoriteID = acFavoriteTable.GetNewFavoriteID();
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return newFavoriteID;
        }

        /// <summary>
        /// お気に入り情報の登録
        /// </summary>
        /// <param name="newFavoriteId">お気に入りID</param>
        /// <param name="newFavoriteName">お気に入り名</param>
        /// <param name="existFavoriteName">1:上書き, 0:新規</param>
        /// <param name="strTargetTable">対象テーブル名</param>
        /// <param name="dtFavWork">お気に入りテーブル</param>
        /// <param name="dtFavConWork">お気に入り表示条件テーブル</param>
        /// <param name="dtFavSortWork">お気に入り並べ替えテーブル</param>
        /// <param name="existFavoriteName">1:上書き, 0:新規</param>
        /// <param name="strMsg">エラーメッセージ</param>
        /// <returns>true/false</returns>
        public bool RegistFavoriteTable(
            string newFavoriteId,
            string newFavoriteName,
            string strTargetTable,
            DataTable dtFavWork,
            DataTable dtFavConWork,
            DataTable dtFavSortWork,
            int existFavoriteName,
            ref string strMsg
            )
        {
            bool ret = true;

            try
            {
                // お気に入り情報の登録
                ret = acFavoriteTable.RegistFavoriteTable(
                    newFavoriteId,
                    newFavoriteName,
                    loginUserId,
                    strTargetTable,
                    dtFavWork,
                    dtFavConWork,
                    dtFavSortWork,
                    existFavoriteName,
                    ref strMsg
                    );
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return ret;
        }

        /// <summary>
        /// お気に入りテーブル情報の読み込み
        /// </summary>
        /// <param name="strMsg">エラーメッセージ</param>
        /// <returns>true/false</returns>
        public bool GetFavoriteTableItem(
            ref string strMsg
            )
        {
            bool ret = true;

            try
            {
                // お気に入りテーブル情報の読み込み
                ret = acFavoriteTable.GetFavoriteTableItem(
                    ref dicTableName,
                    ref dicTableItemName,
                    ref strMsg
                    );
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return ret;
        }

        /// <summary>
        /// 対象テーブル情報の読み込み
        /// </summary>
        /// <param name="strTargetTable">対象テーブル名</param>
        /// <param name="strMsg">エラーメッセージ</param>
        /// <returns>DataTableのアイテム（列）情報</returns>
        public DataColumnCollection GetTargetColumnInfo(
            string strTargetTable,
            ref string strMsg
            )
        {
            DataColumnCollection cols = null;

            try
            {
                // 対象テーブル情報の読み込み
                cols = acTargetTable.GetTargetColumnInfo(
                    dicTableName[strTargetTable],
                    ref strMsg
                    );
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return cols;
        }

        /// <summary>
        /// ロス変換対象項目の取得
        /// </summary>
        /// <param name="strTargetTable">対象テーブル名</param>
        /// <param name="strMsg">エラーメッセージ</param>
        /// <returns>項目名</returns>
        public String GetLossItemName(
            string strTargetTable,
            ref string strMsg
            )
        {
            String LossItemName = "";

            try
            {
                // ロス変換対象項目の取得
                LossItemName = acLossMaster.GetLossItemName(
                    dicLossTableKey[strTargetTable],
                    ref strMsg
                    );
            }
            catch (Exception ex)
            {
                strMsg = ex.Message;
                LossItemName = "";
            }

            return LossItemName;
        }

        /// <summary>
        /// 検索処理
        /// </summary>
        /// <param name="strTableName">対象テーブル名</param>
        /// <param name="cols">テーブル情報</param>
        /// <param name="LossItemName">ロス変換対象項目</param>
        /// <param name="gvCondition">検索条件</param>
        /// <param name="dt">読み込みデータ</param>
        /// <param name="dtSchema">列のスキーマ情報</param>
        /// <param name="strMsg">エラーメッセージ</param>
        /// <returns>true/false</returns>
        public bool GetSearchData(
            string strTargetTable,
            DataColumnCollection cols,
            String LossItemName,
            DataGrid gvCondition,
            ref DataTable dt,
            ref DataTable dtSchema,
            ref string strMsg
            )
        {
            bool ret = true;

            try
            {
                // 検索処理
                ret = acTargetTable.GetSearchData(
                    dicTableName[strTargetTable],
                    cols,
                    LossTableName,
                    ColLossType,
                    LossItemName,
                    dicLossTableKey[strTargetTable],
                    gvCondition,
                    dtFavoriteSort,
                    Item_nList,
                    Logical_expList,
                    dicConditional,
                    dicTableItemName[strTargetTable],
                    ref dt,
                    ref dtSchema,
                    ref strMsg
                    );
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {

            }

            return ret;
        }

        /// <summary>
        /// 対象テーブル選択
        /// </summary>
        /// <param name="strTargetTable">対象テーブル名</param>
        public void SelectTargetTable(
            string strTargetTable
            )
        {
            // お気に入り表示項目を生成
            CreateDtFavoriteSort(strTargetTable, ref item_nList);

            int cnt = 1;                // 表示順（連番）
            foreach (string item in dicTableItemName[strTargetTable].Keys)
            {
                DataRow newrow = dtFavoriteSort.NewRow();

                newrow["USER_ID"] = loginUserId;
                newrow["FAVORITE_ID"] = "";
                newrow["ITEM_NO"] = cnt;
                newrow["ITEM_N"] = item;
                newrow["CAPTION"] = dicTableItemName[strTargetTable][item];
                newrow["DISP_FLG"] = "1";
                newrow["ORDER_PRIORITY"] = 0;
                newrow["ORDER_FLG"] = "0";
                newrow["SORT_NO"] = cnt;

                dtFavoriteSort.Rows.Add(newrow);

                cnt++;
            }
        }

        /// <summary>
        /// お気に入り表示条件テーブルに設定
        /// </summary>
        /// <param name="strTargetTable">対象テーブル名</param>
        /// <param name="gvCondition">条件式</param>
        public void SetFavoriteCon(
            string strTargetTable,
            DataGrid gvCondition
            )
        {
            try
            {
                // お気に入り表示条件テーブルに設定
                CreateDtFavoriteCon();

                int cnt = 0;
                for (int i = 0; i < gvCondition.Items.Count; i++)
                {
                    var rowCon = gvCondition.ItemContainerGenerator.ContainerFromIndex(i) as DataGridRow;

                    // 項目
                    var colItem_n = gvCondition.Columns[1].GetCellContent(rowCon);
                    //if ((colItem_n as TextBlock)?.Text == null) continue;
                    if ((colItem_n.DataContext as DataExtractConditionItem)?.ColItem_n == null) continue;

                    dtFavoriteCon.Rows.Add();

                    DataRow row = dtFavoriteCon.Rows[cnt];

                    // アイテム名に対応したコードを取得
                    //string itemName = (colItem_n as TextBlock)?.Text;
                    string itemName = Item_nList[int.Parse((colItem_n.DataContext as DataExtractConditionItem)?.ColItem_n)].Label;
                    var pair = dicTableItemName[strTargetTable].FirstOrDefault(c => c.Value == itemName);
                    string itemCode = pair.Key;

                    var colConditionalCon = gvCondition.Columns[2].GetCellContent(rowCon);
                    var colCon_value = gvCondition.Columns[3].GetCellContent(rowCon);
                    var colLogical_expCon = gvCondition.Columns[4].GetCellContent(rowCon);

                    row["CONDITION_NO"] = cnt + 1;
                    row["ITEM_N"] = itemCode;
                    //row["CAPTION"] = (colItem_n as TextBlock)?.Text;
                    row["CAPTION"] = itemName;
                    //DataGridwComboBoxCell colConditional = (DataGridViewComboBoxCell)gvCondition.Rows[i].Cells["colConditional"];
                    //row["CONDITIONAL"] = colConditional.Items.IndexOf(colConditional.Value);
                    row["CONDITIONAL"] = ConditionalList[int.Parse((colConditionalCon.DataContext as DataExtractConditionItem)?.ColConditional)].Value;
                    row["CON_VALUE"] = (colCon_value.DataContext as DataExtractConditionItem)?.ColCon_value;
                    //row["CON_VALUE"] = (colCon_value as TextBlock)?.Text;
                    if (colLogical_expCon != null)
                    {
                        //DataGridViewComboBoxCell colLogical_exp = (DataGridViewComboBoxCell)gvCondition.Rows[i].Cells["colLogical_exp"];
                        //row["LOGICAL_EXP"] = colLogical_exp.Items.IndexOf(colLogical_exp.Value);
                        row["LOGICAL_EXP"] = (colLogical_expCon.DataContext as DataExtractConditionItem)?.ColLogical_exp;
                    }
                    else
                    {
                        row["LOGICAL_EXP"] = "0";
                    }
                    cnt++;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
    }
}
