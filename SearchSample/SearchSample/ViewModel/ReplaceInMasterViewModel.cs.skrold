using MRILossTool.DataModel;
using MRILossTool.Model;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MRILossTool.ViewModel
{
    /// <summary>
    /// 置換定義マスタメンテナンス ViewModel
    /// </summary>
    class ReplaceInMasterViewModel
    {
        #region "DBアクセスモデル"

        private ReplaceInMasterAccess acReplaceInMaster = new ReplaceInMasterAccess();

        #endregion

        #region "変数"
        /// <summary>
        /// DBデータ
        /// </summary>
        private DataSetMaster.S_REPLACE_INDataTable dtMst = new DataSetMaster.S_REPLACE_INDataTable();
        public DataSetMaster.S_REPLACE_INDataTable DtMst { get => dtMst; set => dtMst = value; }

        /// <summary>
        /// 一覧ヘッダ
        /// </summary>
        private String[] columnName = {
            "項目名",
            "変換前",
            "変換後"
        };
        public string[] ColumnName { get => columnName; set => columnName = value; }

        private String[] columnRelace = {
            "ITEM_N",
            "PREV_VALUE",
            "AFTER_VALUE"
        };
        public string[] ColumnRelace { get => columnRelace; set => columnRelace = value; }

        /// <summary>
        /// 項目名 コンボボックス
        /// </summary>
        private DataTable itemNameDT = new DataTable();
        public DataTable ItemNameDT { get => itemNameDT; set => itemNameDT = value; }

        #endregion

        /// <summary>
        /// コンストラクタ
        /// </summary>
        public ReplaceInMasterViewModel()
        {

        }

        /// <summary>
        /// 項目名の読み込み
        /// </summary>
        /// <param name="strCustcd">会社コード</param>
        /// <param name="strKojocd">工場コード</param>
        /// <param name="strTable">対象テーブル</param>
        /// <param name="strFormattype">フォーマット名</param>
        /// <returns>true/false</returns>
        public bool GetItemNData(
            string strCustcd,
            string strKojocd,
            string strTable,
            string strFormattype
            )
        {
            bool ret = true;

            try
            {
                // 項目名の読み込み
                acReplaceInMaster.GetItemNData(
                    ref itemNameDT,
                    strCustcd,
                    strKojocd,
                    strTable,
                    strFormattype
                    );

            }
            catch (Exception ex)
            {
                ret = false;
            }
            finally
            {

            }

            return ret;
        }

        /// <summary>
        /// マスタデータ（MDB）の読み込み
        /// </summary>
        /// <param name="strCustcd">会社コード</param>
        /// <param name="strKojocd">工場コード</param>
        /// <param name="strTable">対象テーブル</param>
        /// <param name="strFormattype">フォーマット名</param>
        /// <param name="strItemN">項目名</param>
        /// <returns>true/false</returns>
        public bool GetMasterData(
            string strCustcd,
            string strKojocd,
            string strTable,
            string strFormattype,
            string strItemN
            )
        {
            bool ret = true;

            try
            {
                // マスタデータ（MDB）の読み込み
                acReplaceInMaster.GetMasterData(
                    ref dtMst,
                    strCustcd,
                    strKojocd,
                    strTable,
                    strFormattype,
                    strItemN
                    );

            }
            catch (Exception ex)
            {
                ret = false;
            }
            finally
            {

            }

            return ret;
        }

        /// <summary>
        /// マスタデータ（MDB）の読み込み：ダウンロード用
        /// </summary>
        /// <param name="dt">データテーブル</param>
        /// <param name="strCustcd">会社コード</param>
        /// <param name="strKojocd">工場コード</param>
        /// <param name="strTable">対象テーブル</param>
        /// <param name="strFormattype">フォーマット名</param>
        /// <returns>true/false</returns>
        public bool GetMasterDataForDownload(
            ref DataSetMaster.S_REPLACE_INDataTable dt,
            string strCustcd,
            string strKojocd,
            string strTable,
            string strFormattype
            )
        {
            bool ret = true;

            try
            {
                // 工場マスタをロードする
                if (!acReplaceInMaster.GetMasterDataForDownload(
                    ref dt,
                    strCustcd,
                    strKojocd,
                    strTable,
                    strFormattype
                    ))
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                ret = false;
            }
            finally
            {

            }

            return ret;
        }

        /// <summary>
        /// CSVファイルをロード
        /// </summary>
        /// <param name="filenName">CSVファイル</param>
        /// <param name="strCustcd">会社コード</param>
        /// <param name="strKojocd">工場コード</param>
        /// <param name="strTable">対象テーブル</param>
        /// <param name="strFormattype">フォーマット名</param>
        /// <param name="erro_list">結果リスト</param>
        /// <param name="strMsg">エラーメッセージ</param>
        /// <returns></returns>
        public int ReadCSVFile(
            String filenName,
            string strCustcd,
            string strKojocd,
            string strTable,
            string strFormattype,
            ref List<string> erro_list,
            ref string strMsg
            )
        {
            int ret = 0;

            try
            {
                // CSVファイルをロード
                ret = acReplaceInMaster.ReadCSVFile(
                    filenName,
                    DtMst,
                    strCustcd,
                    strKojocd,
                    strTable,
                    strFormattype,
                    ref erro_list,
                    ref strMsg
                    );

            }
            catch (Exception ex)
            {
            }
            finally
            {

            }
            return ret;
        }
    }
}
