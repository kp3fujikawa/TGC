using MRILossTool.Model;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MRILossTool.ViewModel
{
    /// <summary>
    /// お気に入りリスト画面 ViewModel
    /// </summary>
    class FavoriteListViewModel
    {
        #region "DBアクセスモデル"

        private FavoriteTableAccess acFavoriteTable = new FavoriteTableAccess();

        #endregion

        #region "定数"

        /// <summary>
        /// システムユーザID
        /// </summary>
        private string systemUserId = "system";
        public string SystemUserId()
        {
            return systemUserId;
        }

        #endregion

        #region "変数"

        /// <summary>
        /// ログインユーザID
        /// </summary>
        private String loginUserId = "user1";
        public String LoginUserID()
        {
            return loginUserId;
        }

        /// <summary>
        /// お気に入りテーブル
        /// </summary>
        private DataTable dtFavorite = new DataTable();
        public DataTable DtFavorite { get => dtFavorite; set => dtFavorite = value; }

        /// <summary>
        /// 選択お気に入りID
        /// </summary>
        private String prvSelectedFavoriteID = "";
        public string SelectedFavoriteID { get => prvSelectedFavoriteID; set => prvSelectedFavoriteID = value; }

        /// <summary>
        /// 選択お気に入り名
        /// </summary>
        private String prvSelectedFavoriteName = "";
        public string SelectedFavoriteName { get => prvSelectedFavoriteName; set => prvSelectedFavoriteName = value; }

        /// <summary>
        /// 選択お気に入りIDのユーザID
        /// </summary>
        private String prvSelectedUserID = "";
        public string SelectedUserID { get => prvSelectedUserID; set => prvSelectedUserID = value; }

        /// <summary>
        /// 選択情報テーブル名
        /// </summary>
        private String prvSelectedTableName = "";
        public string SelectedTableName { get => prvSelectedTableName; set => prvSelectedTableName = value; }

        #endregion

        /// <summary>
        /// コンストラクタ
        /// </summary>
        public FavoriteListViewModel()
        {
            try
            {

            }
            catch (Exception ex)
            {
                return;
            }
        }

        /// <summary>
        /// お気に入りテーブルの読み込み
        /// </summary>
        /// <param name="strMsg">エラーメッセージ</param>
        /// <returns>true/false</returns>
        public bool GetFavoriteTable(
            ref string strMsg
            )
        {
            bool ret = true;

            try
            {
                // お気に入りテーブルの読み込み
                ret = acFavoriteTable.GetFavoriteTable(
                    loginUserId,
                    ref dtFavorite,
                    ref strMsg
                    );
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return ret;
        }

        /// <summary>
        /// お気に入り名の取得
        /// </summary>
        /// <param name="strFavoriteName">お気に入り名</param>
        /// <param name="strMsg">エラーメッセージ</param>
        /// <returns>1:存在する 0:存在しない 2:システムテンプレート</returns>
        public int GetExistFavoriteName(
            String strFavoriteName,
            ref string strMsg
            )
        {
            int ret = 0;

            try
            {
                // お気に入り名の取得
                ret = acFavoriteTable.GetExistFavoriteName(
                    strFavoriteName,
                    systemUserId,
                    ref strMsg
                    );
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return ret;
        }

        /// <summary>
        /// お気に入り名の変更
        /// </summary>
        /// <param name="favoriteID">お気に入りID</param>
        /// <param name="userId">ユーザID</param>
        /// <param name="newFavoriteName">変更お気に入り名</param>
        /// <param name="strMsg">エラーメッセージ</param>
        /// <returns>true/false</returns>
        public bool RenameFavoriteName(
            string favoriteId,
            string userId,
            string newFavoriteName,
            ref string strMsg
            )
        {
            bool ret = true;

            try
            {
                // お気に入り名の変更
                ret = acFavoriteTable.RenameFavoriteName(
                    favoriteId,
                    userId,
                    newFavoriteName,
                    ref strMsg
                    );
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return ret;
        }

        /// <summary>
        /// お気に入り情報の削除
        /// </summary>
        /// <param name="FavoriteID">お気に入りID</param>
        /// <param name="strMsg">エラーメッセージ</param>
        /// <returns>true/false</returns>
        public bool DeleteFavoriteTable(
            string FavoriteID,
            ref string strMsg
            )
        {
            bool ret = true;

            try
            {
                // お気に入り情報の削除
                ret = acFavoriteTable.DeleteFavoriteTable(
                    FavoriteID,
                    loginUserId,
                    ref strMsg
                    );
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return ret;
        }
    }
}
