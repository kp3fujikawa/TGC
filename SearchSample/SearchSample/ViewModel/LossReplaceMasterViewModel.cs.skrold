using MRILossTool.DataModel;
using MRILossTool.Model;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MRILossTool.ViewModel
{
    /// <summary>
    /// ロス変換定義マスタメンテナンス ViewModel
    /// </summary>
    class LossReplaceMasterViewModel
    {
        #region "DBアクセスモデル"

        private LossMasterAccess acLossMaster = new LossMasterAccess();
        private TargetTableAccess acTargetTable = new TargetTableAccess();

        #endregion

        #region "定数"

        #endregion

        #region "変数"
        /// <summary>
        /// DBデータ
        /// </summary>
        private DataSetMaster.S_LOSSDataTable dtMst = new DataSetMaster.S_LOSSDataTable();
        public DataSetMaster.S_LOSSDataTable DtMst { get => dtMst; set => dtMst = value; }

        /// <summary>
        /// 一覧ヘッダ
        /// </summary>
        private String[] headerName = {
            "項目名",
            "コード",
            "ロス"
        };
        public string[] HeaderName { get => headerName; set => headerName = value; }

        private String[] columnName = {
            "ITEM_N",
            "VALUE",
            "LOSS_TYPE"
        };
        public string[] ColumnName { get => columnName; set => columnName = value; }

        /// <summary>
        /// 対象テーブル コンボボックス
        /// </summary>
        private DataTable targetTableDT = new DataTable();
        public DataTable TargetTableDT { get => targetTableDT; set => targetTableDT = value; }

        /// <summary>
        /// 項目名 コンボボックス
        /// </summary>
        private DataTable itemNameDT = new DataTable();
        public DataTable ItemNameDT { get => itemNameDT; set => itemNameDT = value; }

        #endregion

        /// <summary>
        /// コンストラクタ
        /// </summary>
        public LossReplaceMasterViewModel()
        {
            try
            {
                // 対象テーブル
                targetTableDT.Columns.Add("TABLE_N");
                targetTableDT.Columns.Add("TABLE_NAME");
                if (!GetTargetTableData())
                {
                    return;
                }

                // 項目名
                itemNameDT.Columns.Add("TABLE_N");
                itemNameDT.Columns.Add("ITEM_N");

            }
            catch
            {
                return;
            }
        }

        /// <summary>
        /// マスタデータ（MDB）の読み込み
        /// </summary>
        /// <param name="strTargetTable">対象テーブル</param>
        /// <param name="strItemN">項目名</param>
        public void GetMasterData(
            string strTargetTable,
            string strItemN
            )
        {

            try
            {
                // マスタをロードする
                acLossMaster.GetMasterData(
                    ref dtMst,
                    strTargetTable,
                    strItemN
                    );
            }
            catch (Exception ex)
            {
            }
            finally
            {

            }
        }

        /// <summary>
        /// マスタデータ（MDB）の読み込み：ダウンロード用
        /// </summary>
        /// <param name="dt">データテーブル</param>
        /// <param name="strTargetTable">対象テーブル</param>
        /// <returns>true/false</returns>
        public bool GetMasterDataForDownload(
            ref DataTable dt,
            string strTargetTable
            )
        {
            bool ret = true;

            try
            {
                // マスタをロードする
                if (!acLossMaster.GetMasterDataForDownload(
                    ref dt, strTargetTable))
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                ret = false;
            }
            finally
            {

            }

            return ret;
        }

        /// <summary>
        /// 対象テーブルの読み込み
        /// </summary>
        /// <returns>true/false</returns>
        public bool GetTargetTableData()
        {

            bool ret = true;

            try
            {
                targetTableDT.Rows.Clear();

                targetTableDT.Rows.Add(new object[] { "", "" });

                foreach (KeyValuePair<string, string> key in Common.target_table_dic)
                {
                    targetTableDT.Rows.Add(new object[] { key.Key, key.Value });
                }

            }
            catch (Exception ex)
            {
                ret = false;
            }
            finally
            {

            }

            return ret;
        }

        /// <summary>
        /// 項目名の読み込み
        /// </summary>
        /// <returns>true/false</returns>
        public bool GetItemNameData(
            String table_name
            )
        {
            bool ret = true;

            try
            {
                // 項目名の読み込み
                ret = acTargetTable.GetItemNameData(
                    table_name,
                    ref itemNameDT
                    );

            }
            catch (Exception ex)
            {
                ret = false;
            }
            finally
            {

            }

            return ret;
        }

        /// <summary>
        /// CSVファイルをロード
        /// </summary>
        /// <param name="filenName">CSVファイル</param>
        /// <param name="strTargetTable">対象テーブル</param>
        /// <param name="erro_list">結果リスト</param>
        /// <param name="strMsg">エラーメッセージ</param>
        /// <returns></returns>
        public int ReadCSVFile(
            String filenName,
            string strTargetTable,
            ref List<string> erro_list,
            ref string strMsg
            )
        {
            int ret = 0;

            try
            {
                // CSVファイルをロード
                ret = acLossMaster.ReadCSVFile(
                    filenName,
                    DtMst,
                    strTargetTable,
                    ref erro_list,
                    ref strMsg
                    );

            }
            catch (Exception ex)
            {
            }
            finally
            {
            }
            return ret;
        }
    }
}
